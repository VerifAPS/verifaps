MODULE main
IVAR
    new$Main$Conveyor$0$Conveyor$SorterConveyorTowardsCrane__random : boolean;
    new$Main$Conveyor$0$Conveyor$SorterConveyorTowardsStacker__random : boolean;
    new$Main$Conveyor$0$Conveyor$SorterGreenLampConveyor__random : boolean;
    new$Main$Conveyor$0$Conveyor$SorterWhiteLampConveyor__random : boolean;
    new$Main$Conveyor$0$Conveyor$StartCommandConveyor__random : boolean;
    new$Main$Crane$0$Crane$AnalogCranePressure__random : signed word[16];
    new$Main$Crane$0$Crane$CraneLower__random : boolean;
    new$Main$Crane$0$Crane$CraneTurnClockwise__random : boolean;
    new$Main$Crane$0$Crane$CraneTurnCounterclockwise__random : boolean;
    new$Main$Crane$0$Crane$MagazinSlider__random : boolean;
    new$Main$Crane$0$Crane$MagazinVacuumOff__random : boolean;
    new$Main$Crane$0$Crane$MagazinVacuumOn__random : boolean;
    new$Main$Crane$0$Crane$StartCommandCrane__random : boolean;
    new$Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$ET__random : unsigned word[16];
    new$Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$Q__random : boolean;
    new$Main$Crane$Timer1$0$Crane$Timer1$ET__random : unsigned word[16];
    new$Main$Crane$Timer1$0$Crane$Timer1$Q__random : boolean;
    new$Main$Crane$Timer1$1$Crane$Timer1$ET__random : unsigned word[16];
    new$Main$Crane$Timer1$1$Crane$Timer1$Q__random : boolean;
    new$Main$Mag$0$Mag$CraneLower__random : boolean;
    new$Main$Mag$0$Mag$CraneTurnClockwise__random : boolean;
    new$Main$Mag$0$Mag$CraneTurnCounterclockwise__random : boolean;
    new$Main$Mag$0$Mag$MagazinGreenLamp__random : boolean;
    new$Main$Mag$0$Mag$MagazinSlider__random : boolean;
    new$Main$Mag$0$Mag$MagazinVacuumOff__random : boolean;
    new$Main$Mag$0$Mag$MagazinVacuumOn__random : boolean;
    new$Main$Mag$0$Mag$MagazinWhiteLamp__random : boolean;
    new$Main$Mag$0$Mag$StartCommandMagazin__random : boolean;
    new$Main$Pusher$0$Pusher$PusherY1__random : boolean;
    new$Main$Pusher$0$Pusher$PusherY2__random : boolean;
    new$Main$Stamp$0$Stamp$StampGreenLamp__random : boolean;
    new$Main$Stamp$0$Stamp$StampPressure__random : boolean;
    new$Main$Stamp$0$Stamp$StampPusher__random : boolean;
    new$Main$Stamp$0$Stamp$StampSliderMovedIn__random : boolean;
    new$Main$Stamp$0$Stamp$StampSliderMovedOut__random : boolean;
    new$Main$Stamp$0$Stamp$StampWhiteLamp__random : boolean;
    new$Main$Stamp$0$Stamp$StartCommandStamp__random : boolean;
    new$Main$Stamp$Timer$0$Stamp$Timer$ET__random : unsigned word[16];
    new$Main$Stamp$Timer$0$Stamp$Timer$Q__random : boolean;
    new$Main$Stamp$Timer$1$Stamp$Timer$ET__random : unsigned word[16];
    new$Main$Stamp$Timer$1$Stamp$Timer$Q__random : boolean;
    new$Sensor_AnalogCranePosition : signed word[16];
    new$Sensor_CraneDown : boolean;
    new$Sensor_CraneOnConveyor : boolean;
    new$Sensor_CraneOnMagazin : boolean;
    new$Sensor_CranePosition : boolean;
    new$Sensor_CranePositionStamp : boolean;
    new$Sensor_CraneSucked : boolean;
    new$Sensor_CraneUp : boolean;
    new$Sensor_MagazinCapacitiveSensor : boolean;
    new$Sensor_MagazinEmergencyStop : boolean;
    new$Sensor_MagazinOpticalSensor : boolean;
    new$Sensor_MagazinSwitchManuellAutomatic : boolean;
    new$Sensor_SliderMovedOut : boolean;
    new$Sensor_SliderNotMovedOut : boolean;
    new$Sensor_SorterCapacitiveSensorPusher1 : boolean;
    new$Sensor_SorterCapacitiveSensorPusher2 : boolean;
    new$Sensor_SorterEmergencyStop : boolean;
    new$Sensor_SorterLightbarrierCraneInterface : boolean;
    new$Sensor_SorterLightnessSensorPusher1 : boolean;
    new$Sensor_SorterLightnessSensorPusher2 : boolean;
    new$Sensor_SorterLightnessSensorPusher3 : boolean;
    new$Sensor_SorterLightnesssensorCraneInterfaceInverse : boolean;
    new$Sensor_SorterPusher1MovedIn : boolean;
    new$Sensor_SorterPusher1MovedOut : boolean;
    new$Sensor_SorterPusher2MovedIn : boolean;
    new$Sensor_SorterPusher2MovedOut : boolean;
    new$Sensor_SorterStartButton : boolean;
    new$Sensor_SorterSwitchManuellAutomatic : boolean;
    new$Sensor_StampEmergencyStop : boolean;
    new$Sensor_StampLowered : boolean;
    new$Sensor_StampSliderFilled : boolean;
    new$Sensor_StampSliderSensorMovedIn : boolean;
    new$Sensor_StampSliderSensorMovedOut : boolean;
    new$Sensor_StampStartButton : boolean;
    new$Sensor_StampSwitchManuellAutomatic : boolean;
    new$Sensor_StampUp : boolean;
    new$Sensor_StartButtonMagazin : boolean;
    new$Sensor_WorkpieceReady : boolean;
    old$Main$Conveyor$0$Conveyor$SorterConveyorTowardsCrane__random : boolean;
    old$Main$Conveyor$0$Conveyor$SorterConveyorTowardsStacker__random : boolean;
    old$Main$Conveyor$0$Conveyor$SorterGreenLampConveyor__random : boolean;
    old$Main$Conveyor$0$Conveyor$SorterWhiteLampConveyor__random : boolean;
    old$Main$Conveyor$0$Conveyor$StartCommandConveyor__random : boolean;
    old$Main$Crane$0$Crane$AnalogCranePressure__random : signed word[16];
    old$Main$Crane$0$Crane$CraneLower__random : boolean;
    old$Main$Crane$0$Crane$CraneTurnClockwise__random : boolean;
    old$Main$Crane$0$Crane$CraneTurnCounterclockwise__random : boolean;
    old$Main$Crane$0$Crane$MagazinVacuumOff__random : boolean;
    old$Main$Crane$0$Crane$MagazinVacuumOn__random : boolean;
    old$Main$Crane$0$Crane$StartCommandCrane__random : boolean;
    old$Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$ET__random : unsigned word[16];
    old$Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$Q__random : boolean;
    old$Main$Crane$Timer1$0$Crane$Timer1$ET__random : unsigned word[16];
    old$Main$Crane$Timer1$0$Crane$Timer1$Q__random : boolean;
    old$Main$Crane$Timer1$1$Crane$Timer1$ET__random : unsigned word[16];
    old$Main$Crane$Timer1$1$Crane$Timer1$Q__random : boolean;
    old$Main$Mag$0$Mag$CraneLower__random : boolean;
    old$Main$Mag$0$Mag$CraneTurnClockwise__random : boolean;
    old$Main$Mag$0$Mag$CraneTurnCounterclockwise__random : boolean;
    old$Main$Mag$0$Mag$MagazinGreenLamp__random : boolean;
    old$Main$Mag$0$Mag$MagazinSlider__random : boolean;
    old$Main$Mag$0$Mag$MagazinVacuumOff__random : boolean;
    old$Main$Mag$0$Mag$MagazinVacuumOn__random : boolean;
    old$Main$Mag$0$Mag$MagazinWhiteLamp__random : boolean;
    old$Main$Mag$0$Mag$StartCommandMagazin__random : boolean;
    old$Main$Pusher$0$Pusher$PusherY1__random : boolean;
    old$Main$Pusher$0$Pusher$PusherY2__random : boolean;
    old$Main$Stamp$0$Stamp$StampGreenLamp__random : boolean;
    old$Main$Stamp$0$Stamp$StampPressure__random : boolean;
    old$Main$Stamp$0$Stamp$StampPusher__random : boolean;
    old$Main$Stamp$0$Stamp$StampSliderMovedIn__random : boolean;
    old$Main$Stamp$0$Stamp$StampSliderMovedOut__random : boolean;
    old$Main$Stamp$0$Stamp$StampWhiteLamp__random : boolean;
    old$Main$Stamp$0$Stamp$StartCommandStamp__random : boolean;
    old$Main$Stamp$Timer$0$Stamp$Timer$ET__random : unsigned word[16];
    old$Main$Stamp$Timer$0$Stamp$Timer$Q__random : boolean;
    old$Main$Stamp$Timer$1$Stamp$Timer$ET__random : unsigned word[16];
    old$Main$Stamp$Timer$1$Stamp$Timer$Q__random : boolean;
    old$Sensor_CraneDown : boolean;
    old$Sensor_CraneOnConveyor : boolean;
    old$Sensor_CraneOnMagazin : boolean;
    old$Sensor_CranePosition : boolean;
    old$Sensor_CranePositionStamp : boolean;
    old$Sensor_CraneSucked : boolean;
    old$Sensor_CraneUp : boolean;
    old$Sensor_MagazinCapacitiveSensor : boolean;
    old$Sensor_MagazinEmergencyStop : boolean;
    old$Sensor_MagazinOpticalSensor : boolean;
    old$Sensor_MagazinSwitchManuellAutomatic : boolean;
    old$Sensor_SliderMovedOut : boolean;
    old$Sensor_SliderNotMovedOut : boolean;
    old$Sensor_SorterCapacitiveSensorPusher1 : boolean;
    old$Sensor_SorterCapacitiveSensorPusher2 : boolean;
    old$Sensor_SorterEmergencyStop : boolean;
    old$Sensor_SorterLightbarrierCraneInterface : boolean;
    old$Sensor_SorterLightnessSensorPusher1 : boolean;
    old$Sensor_SorterLightnessSensorPusher2 : boolean;
    old$Sensor_SorterLightnessSensorPusher3 : boolean;
    old$Sensor_SorterLightnesssensorCraneInterfaceInverse : boolean;
    old$Sensor_SorterPusher1MovedIn : boolean;
    old$Sensor_SorterPusher1MovedOut : boolean;
    old$Sensor_SorterPusher2MovedIn : boolean;
    old$Sensor_SorterPusher2MovedOut : boolean;
    old$Sensor_SorterStartButton : boolean;
    old$Sensor_SorterSwitchManuellAutomatic : boolean;
    old$Sensor_StampEmergencyStop : boolean;
    old$Sensor_StampLowered : boolean;
    old$Sensor_StampSliderFilled : boolean;
    old$Sensor_StampSliderSensorMovedIn : boolean;
    old$Sensor_StampSliderSensorMovedOut : boolean;
    old$Sensor_StampStartButton : boolean;
    old$Sensor_StampSwitchManuellAutomatic : boolean;
    old$Sensor_StampUp : boolean;
    old$Sensor_StartButtonMagazin : boolean;
    old$Sensor_WorkpieceReady : boolean;
-- end of IVAR
VAR
    __premise__ : boolean;
    new : Main$Stamp_abstractednew(new$Main$Conveyor$0$Conveyor$SorterConveyorTowardsCrane__random, new$Main$Conveyor$0$Conveyor$SorterConveyorTowardsStacker__random, new$Main$Conveyor$0$Conveyor$SorterGreenLampConveyor__random, new$Main$Conveyor$0$Conveyor$SorterWhiteLampConveyor__random, new$Main$Conveyor$0$Conveyor$StartCommandConveyor__random, new$Main$Crane$0$Crane$AnalogCranePressure__random, new$Main$Crane$0$Crane$CraneLower__random, new$Main$Crane$0$Crane$CraneTurnClockwise__random, new$Main$Crane$0$Crane$CraneTurnCounterclockwise__random, new$Main$Crane$0$Crane$MagazinSlider__random, new$Main$Crane$0$Crane$MagazinVacuumOff__random, new$Main$Crane$0$Crane$MagazinVacuumOn__random, new$Main$Crane$0$Crane$StartCommandCrane__random, new$Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$ET__random, new$Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$Q__random, new$Main$Crane$Timer1$0$Crane$Timer1$ET__random, new$Main$Crane$Timer1$0$Crane$Timer1$Q__random, new$Main$Crane$Timer1$1$Crane$Timer1$ET__random, new$Main$Crane$Timer1$1$Crane$Timer1$Q__random, new$Main$Mag$0$Mag$CraneLower__random, new$Main$Mag$0$Mag$CraneTurnClockwise__random, new$Main$Mag$0$Mag$CraneTurnCounterclockwise__random, new$Main$Mag$0$Mag$MagazinGreenLamp__random, new$Main$Mag$0$Mag$MagazinSlider__random, new$Main$Mag$0$Mag$MagazinVacuumOff__random, new$Main$Mag$0$Mag$MagazinVacuumOn__random, new$Main$Mag$0$Mag$MagazinWhiteLamp__random, new$Main$Mag$0$Mag$StartCommandMagazin__random, new$Main$Pusher$0$Pusher$PusherY1__random, new$Main$Pusher$0$Pusher$PusherY2__random, new$Main$Stamp$0$Stamp$StampGreenLamp__random, new$Main$Stamp$0$Stamp$StampPressure__random, new$Main$Stamp$0$Stamp$StampPusher__random, new$Main$Stamp$0$Stamp$StampSliderMovedIn__random, new$Main$Stamp$0$Stamp$StampSliderMovedOut__random, new$Main$Stamp$0$Stamp$StampWhiteLamp__random, new$Main$Stamp$0$Stamp$StartCommandStamp__random, new$Main$Stamp$Timer$0$Stamp$Timer$ET__random, new$Main$Stamp$Timer$0$Stamp$Timer$Q__random, new$Main$Stamp$Timer$1$Stamp$Timer$ET__random, new$Main$Stamp$Timer$1$Stamp$Timer$Q__random, new$Sensor_AnalogCranePosition, new$Sensor_CraneDown, new$Sensor_CraneOnConveyor, new$Sensor_CraneOnMagazin, new$Sensor_CranePosition, new$Sensor_CranePositionStamp, new$Sensor_CraneSucked, new$Sensor_CraneUp, new$Sensor_MagazinCapacitiveSensor, new$Sensor_MagazinEmergencyStop, new$Sensor_MagazinOpticalSensor, new$Sensor_MagazinSwitchManuellAutomatic, new$Sensor_SliderMovedOut, new$Sensor_SliderNotMovedOut, new$Sensor_SorterCapacitiveSensorPusher1, new$Sensor_SorterCapacitiveSensorPusher2, new$Sensor_SorterEmergencyStop, new$Sensor_SorterLightbarrierCraneInterface, new$Sensor_SorterLightnessSensorPusher1, new$Sensor_SorterLightnessSensorPusher2, new$Sensor_SorterLightnessSensorPusher3, new$Sensor_SorterLightnesssensorCraneInterfaceInverse, new$Sensor_SorterPusher1MovedIn, new$Sensor_SorterPusher1MovedOut, new$Sensor_SorterPusher2MovedIn, new$Sensor_SorterPusher2MovedOut, new$Sensor_SorterStartButton, new$Sensor_SorterSwitchManuellAutomatic, new$Sensor_StampEmergencyStop, new$Sensor_StampLowered, new$Sensor_StampSliderFilled, new$Sensor_StampSliderSensorMovedIn, new$Sensor_StampSliderSensorMovedOut, new$Sensor_StampStartButton, new$Sensor_StampSwitchManuellAutomatic, new$Sensor_StampUp, new$Sensor_StartButtonMagazin, new$Sensor_WorkpieceReady);
    old : Main$Stamp_abstractedold(old$Main$Conveyor$0$Conveyor$SorterConveyorTowardsCrane__random, old$Main$Conveyor$0$Conveyor$SorterConveyorTowardsStacker__random, old$Main$Conveyor$0$Conveyor$SorterGreenLampConveyor__random, old$Main$Conveyor$0$Conveyor$SorterWhiteLampConveyor__random, old$Main$Conveyor$0$Conveyor$StartCommandConveyor__random, old$Main$Crane$0$Crane$AnalogCranePressure__random, old$Main$Crane$0$Crane$CraneLower__random, old$Main$Crane$0$Crane$CraneTurnClockwise__random, old$Main$Crane$0$Crane$CraneTurnCounterclockwise__random, old$Main$Crane$0$Crane$MagazinVacuumOff__random, old$Main$Crane$0$Crane$MagazinVacuumOn__random, old$Main$Crane$0$Crane$StartCommandCrane__random, old$Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$ET__random, old$Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$Q__random, old$Main$Crane$Timer1$0$Crane$Timer1$ET__random, old$Main$Crane$Timer1$0$Crane$Timer1$Q__random, old$Main$Crane$Timer1$1$Crane$Timer1$ET__random, old$Main$Crane$Timer1$1$Crane$Timer1$Q__random, old$Main$Mag$0$Mag$CraneLower__random, old$Main$Mag$0$Mag$CraneTurnClockwise__random, old$Main$Mag$0$Mag$CraneTurnCounterclockwise__random, old$Main$Mag$0$Mag$MagazinGreenLamp__random, old$Main$Mag$0$Mag$MagazinSlider__random, old$Main$Mag$0$Mag$MagazinVacuumOff__random, old$Main$Mag$0$Mag$MagazinVacuumOn__random, old$Main$Mag$0$Mag$MagazinWhiteLamp__random, old$Main$Mag$0$Mag$StartCommandMagazin__random, old$Main$Pusher$0$Pusher$PusherY1__random, old$Main$Pusher$0$Pusher$PusherY2__random, old$Main$Stamp$0$Stamp$StampGreenLamp__random, old$Main$Stamp$0$Stamp$StampPressure__random, old$Main$Stamp$0$Stamp$StampPusher__random, old$Main$Stamp$0$Stamp$StampSliderMovedIn__random, old$Main$Stamp$0$Stamp$StampSliderMovedOut__random, old$Main$Stamp$0$Stamp$StampWhiteLamp__random, old$Main$Stamp$0$Stamp$StartCommandStamp__random, old$Main$Stamp$Timer$0$Stamp$Timer$ET__random, old$Main$Stamp$Timer$0$Stamp$Timer$Q__random, old$Main$Stamp$Timer$1$Stamp$Timer$ET__random, old$Main$Stamp$Timer$1$Stamp$Timer$Q__random, old$Sensor_CraneDown, old$Sensor_CraneOnConveyor, old$Sensor_CraneOnMagazin, old$Sensor_CranePosition, old$Sensor_CranePositionStamp, old$Sensor_CraneSucked, old$Sensor_CraneUp, old$Sensor_MagazinCapacitiveSensor, old$Sensor_MagazinEmergencyStop, old$Sensor_MagazinOpticalSensor, old$Sensor_MagazinSwitchManuellAutomatic, old$Sensor_SliderMovedOut, old$Sensor_SliderNotMovedOut, old$Sensor_SorterCapacitiveSensorPusher1, old$Sensor_SorterCapacitiveSensorPusher2, old$Sensor_SorterEmergencyStop, old$Sensor_SorterLightbarrierCraneInterface, old$Sensor_SorterLightnessSensorPusher1, old$Sensor_SorterLightnessSensorPusher2, old$Sensor_SorterLightnessSensorPusher3, old$Sensor_SorterLightnesssensorCraneInterfaceInverse, old$Sensor_SorterPusher1MovedIn, old$Sensor_SorterPusher1MovedOut, old$Sensor_SorterPusher2MovedIn, old$Sensor_SorterPusher2MovedOut, old$Sensor_SorterStartButton, old$Sensor_SorterSwitchManuellAutomatic, old$Sensor_StampEmergencyStop, old$Sensor_StampLowered, old$Sensor_StampSliderFilled, old$Sensor_StampSliderSensorMovedIn, old$Sensor_StampSliderSensorMovedOut, old$Sensor_StampStartButton, old$Sensor_StampSwitchManuellAutomatic, old$Sensor_StampUp, old$Sensor_StartButtonMagazin, old$Sensor_WorkpieceReady);
-- end of VAR
DEFINE

INVARSPEC
    __premise__ -> old.Main$Stamp$Timer_ccnt = new.Main$Stamp$Timer_ccnt 
& old.Main$Stamp$Timer$1$Stamp$Timer$IN__input = new.Main$Stamp$Timer$1$Stamp$Timer$IN__input 
& old.Main$Stamp$Timer$1$Stamp$Timer$PT__input = new.Main$Stamp$Timer$1$Stamp$Timer$PT__input 
& old.Main$Stamp_ccnt = new.Main$Stamp_ccnt 
& old.Stamp$CraneDown = new.Stamp$CraneDown 
& old.Stamp$CraneOnConveyor = new.Stamp$CraneOnConveyor 
& old.Stamp$CraneOnConveyor = (0sd16_16160 < new.Main$Stamp$0$Stamp$AnalogCranePosition__input 
& new.Main$Stamp$0$Stamp$AnalogCranePosition__input < 0sd16_16260) 
& old.Stamp$CranePositionStamp = (0sd16_8160 < new.Main$Stamp$0$Stamp$AnalogCranePosition__input 
& new.Main$Stamp$0$Stamp$AnalogCranePosition__input < 0sd16_8260) 
& old.Stamp$CranePositionStamp = new.Stamp$CranePositionStamp 
& old.Stamp$CraneSucked = new.Stamp$CraneSucked 
& old.Stamp$CraneUp = new.Stamp$CraneUp 
& old.Stamp$SFCReset = new.Stamp$SFCReset 
& old.Stamp$StampLowered = new.Stamp$StampLowered 
& old.Stamp$StampSliderFilled = new.Stamp$StampSliderFilled 
& old.Stamp$StampSliderSensorMovedIn = new.Stamp$StampSliderSensorMovedIn 
& old.Stamp$StampSliderSensorMovedOut = new.Stamp$StampSliderSensorMovedOut 
& old.Stamp$StampStartButton = new.Stamp$StampStartButton 
& old.Stamp$StampUp = new.Stamp$StampUp 
& old.Stamp$StartVar = new.Stamp$StartVar 
--& old.Main$Stamp$Timer$1$Stamp$Timer$ET__random = new.Main$Stamp$Timer$1$Stamp$Timer$ET__random 
--& old.Main$Stamp$Timer$1$Stamp$Timer$Q__random = new.Main$Stamp$Timer$1$Stamp$Timer$Q__random

ASSIGN
    init(__premise__) := TRUE;
    next(__premise__) := __premise__ & old.Stamp$CraneDown = new.Stamp$CraneDown & old.Stamp$CraneOnConveyor = new.Stamp$CraneOnConveyor & old.Stamp$CraneOnConveyor = (0sd16_16160 < new.Main$Stamp$0$Stamp$AnalogCranePosition__input & new.Main$Stamp$0$Stamp$AnalogCranePosition__input < 0sd16_16260) & old.Stamp$CranePositionStamp = (0sd16_8160 < new.Main$Stamp$0$Stamp$AnalogCranePosition__input & new.Main$Stamp$0$Stamp$AnalogCranePosition__input < 0sd16_8260) & old.Stamp$CranePositionStamp = new.Stamp$CranePositionStamp & old.Stamp$CraneSucked = new.Stamp$CraneSucked & old.Stamp$CraneUp = new.Stamp$CraneUp & old.Stamp$SFCReset = new.Stamp$SFCReset & old.Stamp$StampLowered = new.Stamp$StampLowered & old.Stamp$StampSliderFilled = new.Stamp$StampSliderFilled & old.Stamp$StampSliderSensorMovedIn = new.Stamp$StampSliderSensorMovedIn & old.Stamp$StampSliderSensorMovedOut = new.Stamp$StampSliderSensorMovedOut & old.Stamp$StampStartButton = new.Stamp$StampStartButton & old.Stamp$StampUp = new.Stamp$StampUp & old.Stamp$StartVar = new.Stamp$StartVar & old.Main$Stamp$Timer$1$Stamp$Timer$ET__random = new.Main$Stamp$Timer$1$Stamp$Timer$ET__random & old.Main$Stamp$Timer$1$Stamp$Timer$Q__random = new.Main$Stamp$Timer$1$Stamp$Timer$Q__random & old.Main$Stamp$Timer_ccnt = new.Main$Stamp$Timer_ccnt & old.Main$Stamp$Timer$1$Stamp$Timer$IN__input = new.Main$Stamp$Timer$1$Stamp$Timer$IN__input & old.Main$Stamp$Timer$1$Stamp$Timer$PT__input = new.Main$Stamp$Timer$1$Stamp$Timer$PT__input & old.Main$Stamp_ccnt = new.Main$Stamp_ccnt & old.Stamp$CraneDown = new.Stamp$CraneDown & old.Stamp$CraneOnConveyor = new.Stamp$CraneOnConveyor & old.Stamp$CraneOnConveyor = (0sd16_16160 < new.Main$Stamp$0$Stamp$AnalogCranePosition__input & new.Main$Stamp$0$Stamp$AnalogCranePosition__input < 0sd16_16260) & old.Stamp$CranePositionStamp = (0sd16_8160 < new.Main$Stamp$0$Stamp$AnalogCranePosition__input & new.Main$Stamp$0$Stamp$AnalogCranePosition__input < 0sd16_8260) & old.Stamp$CranePositionStamp = new.Stamp$CranePositionStamp & old.Stamp$CraneSucked = new.Stamp$CraneSucked & old.Stamp$CraneUp = new.Stamp$CraneUp & old.Stamp$SFCReset = new.Stamp$SFCReset & old.Stamp$StampLowered = new.Stamp$StampLowered & old.Stamp$StampSliderFilled = new.Stamp$StampSliderFilled & old.Stamp$StampSliderSensorMovedIn = new.Stamp$StampSliderSensorMovedIn & old.Stamp$StampSliderSensorMovedOut = new.Stamp$StampSliderSensorMovedOut & old.Stamp$StampStartButton = new.Stamp$StampStartButton & old.Stamp$StampUp = new.Stamp$StampUp & old.Stamp$StartVar = new.Stamp$StartVar & old.Main$Stamp$Timer$1$Stamp$Timer$ET__random = new.Main$Stamp$Timer$1$Stamp$Timer$ET__random & old.Main$Stamp$Timer$1$Stamp$Timer$Q__random = new.Main$Stamp$Timer$1$Stamp$Timer$Q__random & TRUE;
-- end of module main
MODULE Main$Stamp_abstractedold(Main$Conveyor$0$Conveyor$SorterConveyorTowardsCrane__random, Main$Conveyor$0$Conveyor$SorterConveyorTowardsStacker__random, Main$Conveyor$0$Conveyor$SorterGreenLampConveyor__random, Main$Conveyor$0$Conveyor$SorterWhiteLampConveyor__random, Main$Conveyor$0$Conveyor$StartCommandConveyor__random, Main$Crane$0$Crane$AnalogCranePressure__random, Main$Crane$0$Crane$CraneLower__random, Main$Crane$0$Crane$CraneTurnClockwise__random, Main$Crane$0$Crane$CraneTurnCounterclockwise__random, Main$Crane$0$Crane$MagazinVacuumOff__random, Main$Crane$0$Crane$MagazinVacuumOn__random, Main$Crane$0$Crane$StartCommandCrane__random, Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$ET__random, Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$Q__random, Main$Crane$Timer1$0$Crane$Timer1$ET__random, Main$Crane$Timer1$0$Crane$Timer1$Q__random, Main$Crane$Timer1$1$Crane$Timer1$ET__random, Main$Crane$Timer1$1$Crane$Timer1$Q__random, Main$Mag$0$Mag$CraneLower__random, Main$Mag$0$Mag$CraneTurnClockwise__random, Main$Mag$0$Mag$CraneTurnCounterclockwise__random, Main$Mag$0$Mag$MagazinGreenLamp__random, Main$Mag$0$Mag$MagazinSlider__random, Main$Mag$0$Mag$MagazinVacuumOff__random, Main$Mag$0$Mag$MagazinVacuumOn__random, Main$Mag$0$Mag$MagazinWhiteLamp__random, Main$Mag$0$Mag$StartCommandMagazin__random, Main$Pusher$0$Pusher$PusherY1__random, Main$Pusher$0$Pusher$PusherY2__random, Main$Stamp$0$Stamp$StampGreenLamp__random, Main$Stamp$0$Stamp$StampPressure__random, Main$Stamp$0$Stamp$StampPusher__random, Main$Stamp$0$Stamp$StampSliderMovedIn__random, Main$Stamp$0$Stamp$StampSliderMovedOut__random, Main$Stamp$0$Stamp$StampWhiteLamp__random, Main$Stamp$0$Stamp$StartCommandStamp__random, Main$Stamp$Timer$0$Stamp$Timer$ET__random, Main$Stamp$Timer$0$Stamp$Timer$Q__random, Main$Stamp$Timer$1$Stamp$Timer$ET__random, Main$Stamp$Timer$1$Stamp$Timer$Q__random, Sensor_CraneDown, Sensor_CraneOnConveyor, Sensor_CraneOnMagazin, Sensor_CranePosition, Sensor_CranePositionStamp, Sensor_CraneSucked, Sensor_CraneUp, Sensor_MagazinCapacitiveSensor, Sensor_MagazinEmergencyStop, Sensor_MagazinOpticalSensor, Sensor_MagazinSwitchManuellAutomatic, Sensor_SliderMovedOut, Sensor_SliderNotMovedOut, Sensor_SorterCapacitiveSensorPusher1, Sensor_SorterCapacitiveSensorPusher2, Sensor_SorterEmergencyStop, Sensor_SorterLightbarrierCraneInterface, Sensor_SorterLightnessSensorPusher1, Sensor_SorterLightnessSensorPusher2, Sensor_SorterLightnessSensorPusher3, Sensor_SorterLightnesssensorCraneInterfaceInverse, Sensor_SorterPusher1MovedIn, Sensor_SorterPusher1MovedOut, Sensor_SorterPusher2MovedIn, Sensor_SorterPusher2MovedOut, Sensor_SorterStartButton, Sensor_SorterSwitchManuellAutomatic, Sensor_StampEmergencyStop, Sensor_StampLowered, Sensor_StampSliderFilled, Sensor_StampSliderSensorMovedIn, Sensor_StampSliderSensorMovedOut, Sensor_StampStartButton, Sensor_StampSwitchManuellAutomatic, Sensor_StampUp, Sensor_StartButtonMagazin, Sensor_WorkpieceReady)
VAR
    Actuator_AnalogCranePressure : signed word[16];
    Actuator_CraneLower : boolean;
    Actuator_CraneTurnClockwise : boolean;
    Actuator_CraneTurnCounterclockwise : boolean;
    Actuator_MagazinGreenLamp : boolean;
    Actuator_MagazinSlider : boolean;
    Actuator_MagazinVacuumOff : boolean;
    Actuator_MagazinVacuumOn : boolean;
    Actuator_MagazinWhiteLamp : boolean;
    Actuator_PusherY1 : boolean;
    Actuator_PusherY2 : boolean;
    Actuator_SorterConveyorTowardsCrane : boolean;
    Actuator_SorterConveyorTowardsStacker : boolean;
    Actuator_SorterGreenLampConveyor : boolean;
    Actuator_SorterWhiteLampConveyor : boolean;
    Actuator_StampGreenLamp : boolean;
    Actuator_StampPusher : boolean;
    Actuator_StampSliderMovedIn : boolean;
    Actuator_StampSliderMovedOut : boolean;
    Actuator_StampWhiteLamp : boolean;
    Conveyor$Duration_Conveyor_Runtime : unsigned word[16];
    Conveyor$Duration_Conveyor_Test : unsigned word[16];
    Conveyor$SFCInit : boolean;
    Conveyor$SFCPause : boolean;
    Conveyor$SFCReset : boolean;
    Conveyor$SorterConveyorTowardsCrane : boolean;
    Conveyor$SorterConveyorTowardsStacker : boolean;
    Conveyor$SorterGreenLampConveyor : boolean;
    Conveyor$SorterLightbarrierCraneInterface : boolean;
    Conveyor$SorterStartButton : boolean;
    Conveyor$SorterSwitchManuellAutomatic : boolean;
    Conveyor$SorterWhiteLampConveyor : boolean;
    Conveyor$StartCommandConveyor : boolean;
    Conveyor$StartVar : boolean;
    Conveyor$Timer_Conveyor_Runtime$ET : unsigned word[16];
    Conveyor$Timer_Conveyor_Runtime$IN : boolean;
    Conveyor$Timer_Conveyor_Runtime$PT : unsigned word[16];
    Conveyor$Timer_Conveyor_Runtime$Q : boolean;
    Conveyor$Timer_Conveyor_Test$ET : unsigned word[16];
    Conveyor$Timer_Conveyor_Test$IN : boolean;
    Conveyor$Timer_Conveyor_Test$PT : unsigned word[16];
    Conveyor$Timer_Conveyor_Test$Q : boolean;
    Conveyor$__transit : boolean;
    Conveyor$_state : {"INIT", START_CONVEYOR, GREEN_LAMP, CONVEYOR_INIT, CONVEYOR_INIT_2, INTERSTEP, STEP0, CONVEYOR_TOWARDS_STACKER, RUNTIME_CONVEYOR, CONVEYOR_PAUSE, CONVEYOR_STOP_EMPTY_MAGAZIN};
    Conveyor$interconnectConveyorStartCommand : boolean;
    Conveyor$interconnectConveyorTerminationCommand : boolean;
    Conveyor$interconnect_Conveyor_Runtime : boolean;
    Conveyor$interconnect_Conveyor_Test : boolean;
    Crane$AnalogCranePressure : signed word[16];
    Crane$CraneDown : boolean;
    Crane$CraneLower : boolean;
    Crane$CraneOnConveyor : boolean;
    Crane$CraneOnMagazin : boolean;
    Crane$CranePositionStamp : boolean;
    Crane$CraneSucked : boolean;
    Crane$CraneTurnClockwise : boolean;
    Crane$CraneTurnCounterclockwise : boolean;
    Crane$CraneUp : boolean;
    Crane$Duration1 : unsigned word[16];
    Crane$MagazinCapacitiveSensor : boolean;
    Crane$MagazinOpticalSensor : boolean;
    Crane$MagazinVacuumOff : boolean;
    Crane$MagazinVacuumOn : boolean;
    Crane$SFCInit : boolean;
    Crane$SFCPause : boolean;
    Crane$SFCReset : boolean;
    Crane$SliderMovedOut : boolean;
    Crane$SliderNotMovedOut : boolean;
    Crane$StampLowered : boolean;
    Crane$StampSliderFilled : boolean;
    Crane$StampSliderSensorMovedOut : boolean;
    Crane$StartButtonMagazin : boolean;
    Crane$StartCommandCrane : boolean;
    Crane$StartVar : boolean;
    Crane$TimeDelay_Timer$ET : unsigned word[16];
    Crane$TimeDelay_Timer$IN : boolean;
    Crane$TimeDelay_Timer$PT : unsigned word[16];
    Crane$TimeDelay_Timer$Q : boolean;
    Crane$TimeDelay_Timer_Duration : unsigned word[16];
    Crane$TimeDelay_Timer_interconnect : boolean;
    Crane$Timer1$ET : unsigned word[16];
    Crane$Timer1$IN : boolean;
    Crane$Timer1$PT : unsigned word[16];
    Crane$Timer1$Q : boolean;
    Crane$WorkpieceReady : boolean;
    Crane$__transit : boolean;
    Crane$_state : {"INIT", START_CRANE, CRANE_INIT, CRANE_INIT_2, INTERSTEP, INTERSTEP_2, TIMEDELAY, INTERSTEP_3, TURN_RIGHT, MAGAZIN_STOP, CRANE_LOWER, STEP0, CRANE_LIFT_MAGAZIN, CRANE_TURN_LEFT_NOT_METALLIC, CRANE_ON_CONVEYOR, STAMP_PRESSURE_PROFILE_SET_METALLIC, CRANE_LIFT_MAGAZIN_METALLIC, CRANE_TURN_LEFT_METALLIC, CRANE_ON_STAMP_METALLIC, RELEASE_WORKPIECE, CRANE_GO_UP, STAMP_PRESSURE_PROFILE_SET_WHITE, CRANE_LIFT_MAGAZIN_WHITE, CRANE_TURN_LEFT_WHITE, CRANE_ON_STAMP_WHITE, RELEASE_WORKPIECE_WHITE, CRANE_GO_UP_WHITE, STEP3, STEP2, PAUSE, TURN_RIGHT_BLACK, MAGAZIN_STOP_BLACK, CRANE_LIFT_NOT_METALLIC_BLACK, CRANE_TURN_LEFT_NOT_METALLIC_BLACK, CRANE_ON_CONVEYOR_NOT_METALLICA_BLACK, RELEASE_BLACK, CRANE_LIFT_CONVEYOR_BLACK, CRANE_TURN_LEFT_BACK_TO_STAMP, CRANE_ON_STAMP_STOP_BLACK, STEP4, RESET_INTERCONNECT, LOWER_CRANE, SUCK_AT_STAMP, CRANE_LIFT_AT_STAMP, CRANE_TURN_LEFT_FROM_STAMP, CRANE_ON_CONVEYOR_METALLIC, RELEASE, CRANE_LIFT_CONVEYOR, NO_WORKPIECE_READY, CRANE_TURN_LEFT_METALLIC2, CRANE_ON_STAMP_METALLIC2, INTERSTEP_4, CRANE_ON_STAMP_METALLIC2_LOWER, SUCK_AT_STAMP2, CRANE_LIFT_AT_STAMP2, CRANE_TURN_RIGHT_FROM_STAMP, CRANE_ON_CONVEYOR_METALLIC2, RELEASE2, CRANE_LIFT_CONVEYOR2, TURN_RIGHT_FINAL, MAGAZIN_STOP_FINAL};
    Crane$actualtime1 : unsigned word[16];
    Crane$interconnect : boolean;
    Crane$interconnectCraneStartCommand : boolean;
    Mag$CraneDown : boolean;
    Mag$CraneLower : boolean;
    Mag$CraneOnConveyor : boolean;
    Mag$CraneOnMagazin : boolean;
    Mag$CraneSucked : boolean;
    Mag$CraneTurnClockwise : boolean;
    Mag$CraneTurnCounterclockwise : boolean;
    Mag$CraneUp : boolean;
    Mag$MagazinGreenLamp : boolean;
    Mag$MagazinSlider : boolean;
    Mag$MagazinVacuumOff : boolean;
    Mag$MagazinVacuumOn : boolean;
    Mag$MagazinWhiteLamp : boolean;
    Mag$SFCInit : boolean;
    Mag$SFCPause : boolean;
    Mag$SFCReset : boolean;
    Mag$SliderMovedOut : boolean;
    Mag$SliderNotMovedOut : boolean;
    Mag$StartButtonMagazin : boolean;
    Mag$StartCommandMagazin : boolean;
    Mag$StartVar : boolean;
    Mag$WorkpieceReady : boolean;
    Mag$__transit : boolean;
    Mag$_state : {"INIT", START_MAGAZIN, GREEN_LAMP, MAGAZIN_INIT, MAGAZIN_INIT_2, INTERSTEP, CONVEY, STEP0, SLIDER_MOVE_BACK, STEP1};
    Mag$interconnectMagazinStartCommand : boolean;
    Main$Conveyor$0$Conveyor$SFCReset__input : boolean;
    Main$Conveyor$0$Conveyor$SorterLightbarrierCraneInterface__input : boolean;
    Main$Conveyor$0$Conveyor$SorterStartButton__input : boolean;
    Main$Conveyor$0$Conveyor$SorterSwitchManuellAutomatic__input : boolean;
    Main$Conveyor$0$Conveyor$StartVar__input : boolean;
    Main$Conveyor$Timer_Conveyor_Runtime_ccnt : unsigned word[8];
    Main$Conveyor$Timer_Conveyor_Test_ccnt : unsigned word[8];
    Main$Conveyor_ccnt : unsigned word[8];
    Main$Crane$0$Crane$CraneDown__input : boolean;
    Main$Crane$0$Crane$CraneOnConveyor__input : boolean;
    Main$Crane$0$Crane$CraneOnMagazin__input : boolean;
    Main$Crane$0$Crane$CranePositionStamp__input : boolean;
    Main$Crane$0$Crane$CraneSucked__input : boolean;
    Main$Crane$0$Crane$CraneUp__input : boolean;
    Main$Crane$0$Crane$MagazinCapacitiveSensor__input : boolean;
    Main$Crane$0$Crane$MagazinOpticalSensor__input : boolean;
    Main$Crane$0$Crane$SFCReset__input : boolean;
    Main$Crane$0$Crane$SliderMovedOut__input : boolean;
    Main$Crane$0$Crane$SliderNotMovedOut__input : boolean;
    Main$Crane$0$Crane$StampLowered__input : boolean;
    Main$Crane$0$Crane$StampSliderFilled__input : boolean;
    Main$Crane$0$Crane$StampSliderSensorMovedOut__input : boolean;
    Main$Crane$0$Crane$StartButtonMagazin__input : boolean;
    Main$Crane$0$Crane$StartVar__input : boolean;
    Main$Crane$0$Crane$WorkpieceReady__input : boolean;
    Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$IN__input : boolean;
    Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$PT__input : unsigned word[16];
    Main$Crane$TimeDelay_Timer_ccnt : unsigned word[8];
    Main$Crane$Timer1$0$Crane$Timer1$IN__input : boolean;
    Main$Crane$Timer1$0$Crane$Timer1$PT__input : unsigned word[16];
    Main$Crane$Timer1$1$Crane$Timer1$IN__input : boolean;
    Main$Crane$Timer1$1$Crane$Timer1$PT__input : unsigned word[16];
    Main$Crane$Timer1_ccnt : unsigned word[8];
    Main$Crane_ccnt : unsigned word[8];
    Main$Mag$0$Mag$CraneDown__input : boolean;
    Main$Mag$0$Mag$CraneOnConveyor__input : boolean;
    Main$Mag$0$Mag$CraneOnMagazin__input : boolean;
    Main$Mag$0$Mag$CraneSucked__input : boolean;
    Main$Mag$0$Mag$CraneUp__input : boolean;
    Main$Mag$0$Mag$SFCReset__input : boolean;
    Main$Mag$0$Mag$SliderMovedOut__input : boolean;
    Main$Mag$0$Mag$SliderNotMovedOut__input : boolean;
    Main$Mag$0$Mag$StartButtonMagazin__input : boolean;
    Main$Mag$0$Mag$StartVar__input : boolean;
    Main$Mag$0$Mag$WorkpieceReady__input : boolean;
    Main$Mag_ccnt : unsigned word[8];
    Main$Pusher$0$Pusher$SFCReset__input : boolean;
    Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher1__input : boolean;
    Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher2__input : boolean;
    Main$Pusher$0$Pusher$SorterLightbarrierCraneInterface__input : boolean;
    Main$Pusher$0$Pusher$SorterLightnessSensorPusher1__input : boolean;
    Main$Pusher$0$Pusher$SorterLightnessSensorPusher2__input : boolean;
    Main$Pusher$0$Pusher$SorterLightnessSensorPusher3__input : boolean;
    Main$Pusher$0$Pusher$SorterLightnesssensorCraneInterfaceInverse__input : boolean;
    Main$Pusher$0$Pusher$SorterPusher1MovedIn__input : boolean;
    Main$Pusher$0$Pusher$SorterPusher1MovedOut__input : boolean;
    Main$Pusher$0$Pusher$SorterPusher2MovedIn__input : boolean;
    Main$Pusher$0$Pusher$SorterPusher2MovedOut__input : boolean;
    Main$Pusher$0$Pusher$SorterStartButton__input : boolean;
    Main$Pusher$0$Pusher$StartVar__input : boolean;
    Main$Pusher$Timer2_ccnt : unsigned word[8];
    Main$Pusher$Timer3_ccnt : unsigned word[8];
    Main$Pusher$Timer_Slide1_Black_ccnt : unsigned word[8];
    Main$Pusher$Timer_Slide1_Metal_ccnt : unsigned word[8];
    Main$Pusher$Timer_Slide1_White_ccnt : unsigned word[8];
    Main$Pusher$Timer_Slide2_Black_ccnt : unsigned word[8];
    Main$Pusher$Timer_Slide2_Metal_ccnt : unsigned word[8];
    Main$Pusher$Timer_Slide2_White_ccnt : unsigned word[8];
    Main$Pusher_ccnt : unsigned word[8];
    Main$Stamp$0$Stamp$CraneDown__input : boolean;
    Main$Stamp$0$Stamp$CraneOnConveyor__input : boolean;
    Main$Stamp$0$Stamp$CranePositionStamp__input : boolean;
    Main$Stamp$0$Stamp$CraneSucked__input : boolean;
    Main$Stamp$0$Stamp$CraneUp__input : boolean;
    Main$Stamp$0$Stamp$SFCReset__input : boolean;
    Main$Stamp$0$Stamp$StampLowered__input : boolean;
    Main$Stamp$0$Stamp$StampSliderFilled__input : boolean;
    Main$Stamp$0$Stamp$StampSliderSensorMovedIn__input : boolean;
    Main$Stamp$0$Stamp$StampSliderSensorMovedOut__input : boolean;
    Main$Stamp$0$Stamp$StampStartButton__input : boolean;
    Main$Stamp$0$Stamp$StampUp__input : boolean;
    Main$Stamp$0$Stamp$StartVar__input : boolean;
    Main$Stamp$Timer$0$Stamp$Timer$IN__input : boolean;
    Main$Stamp$Timer$0$Stamp$Timer$PT__input : unsigned word[16];
    Main$Stamp$Timer$1$Stamp$Timer$IN__input : boolean;
    Main$Stamp$Timer$1$Stamp$Timer$PT__input : unsigned word[16];
    Main$Stamp$Timer_ccnt : unsigned word[8];
    Main$Stamp_ccnt : unsigned word[8];
    Pusher$Duration2 : unsigned word[16];
    Pusher$Duration3 : unsigned word[16];
    Pusher$Duration_Slide1_Black : unsigned word[16];
    Pusher$Duration_Slide1_Metal : unsigned word[16];
    Pusher$Duration_Slide1_White : unsigned word[16];
    Pusher$Duration_Slide2_Black : unsigned word[16];
    Pusher$Duration_Slide2_Metal : unsigned word[16];
    Pusher$Duration_Slide2_White : unsigned word[16];
    Pusher$Priority_Var_Black : signed word[16];
    Pusher$Priority_Var_Metal : signed word[16];
    Pusher$Priority_Var_White : signed word[16];
    Pusher$PusherY1 : boolean;
    Pusher$PusherY2 : boolean;
    Pusher$SFCInit : boolean;
    Pusher$SFCPause : boolean;
    Pusher$SFCReset : boolean;
    Pusher$Slide1_black : signed word[16];
    Pusher$Slide1_metal : signed word[16];
    Pusher$Slide1_white : signed word[16];
    Pusher$Slide2_black : signed word[16];
    Pusher$Slide2_metal : signed word[16];
    Pusher$Slide2_white : signed word[16];
    Pusher$Slide3_black : signed word[16];
    Pusher$Slide3_metal : signed word[16];
    Pusher$Slide3_white : signed word[16];
    Pusher$SorterCapacitiveSensorPusher1 : boolean;
    Pusher$SorterCapacitiveSensorPusher2 : boolean;
    Pusher$SorterLightbarrierCraneInterface : boolean;
    Pusher$SorterLightnessSensorPusher1 : boolean;
    Pusher$SorterLightnessSensorPusher2 : boolean;
    Pusher$SorterLightnessSensorPusher3 : boolean;
    Pusher$SorterLightnesssensorCraneInterfaceInverse : boolean;
    Pusher$SorterPusher1MovedIn : boolean;
    Pusher$SorterPusher1MovedOut : boolean;
    Pusher$SorterPusher2MovedIn : boolean;
    Pusher$SorterPusher2MovedOut : boolean;
    Pusher$SorterStartButton : boolean;
    Pusher$StartVar : boolean;
    Pusher$Timer2$ET : unsigned word[16];
    Pusher$Timer2$IN : boolean;
    Pusher$Timer2$PT : unsigned word[16];
    Pusher$Timer2$Q : boolean;
    Pusher$Timer3$ET : unsigned word[16];
    Pusher$Timer3$IN : boolean;
    Pusher$Timer3$PT : unsigned word[16];
    Pusher$Timer3$Q : boolean;
    Pusher$Timer_Slide1_Black$ET : unsigned word[16];
    Pusher$Timer_Slide1_Black$IN : boolean;
    Pusher$Timer_Slide1_Black$PT : unsigned word[16];
    Pusher$Timer_Slide1_Black$Q : boolean;
    Pusher$Timer_Slide1_Metal$ET : unsigned word[16];
    Pusher$Timer_Slide1_Metal$IN : boolean;
    Pusher$Timer_Slide1_Metal$PT : unsigned word[16];
    Pusher$Timer_Slide1_Metal$Q : boolean;
    Pusher$Timer_Slide1_White$ET : unsigned word[16];
    Pusher$Timer_Slide1_White$IN : boolean;
    Pusher$Timer_Slide1_White$PT : unsigned word[16];
    Pusher$Timer_Slide1_White$Q : boolean;
    Pusher$Timer_Slide2_Black$ET : unsigned word[16];
    Pusher$Timer_Slide2_Black$IN : boolean;
    Pusher$Timer_Slide2_Black$PT : unsigned word[16];
    Pusher$Timer_Slide2_Black$Q : boolean;
    Pusher$Timer_Slide2_Metal$ET : unsigned word[16];
    Pusher$Timer_Slide2_Metal$IN : boolean;
    Pusher$Timer_Slide2_Metal$PT : unsigned word[16];
    Pusher$Timer_Slide2_Metal$Q : boolean;
    Pusher$Timer_Slide2_White$ET : unsigned word[16];
    Pusher$Timer_Slide2_White$IN : boolean;
    Pusher$Timer_Slide2_White$PT : unsigned word[16];
    Pusher$Timer_Slide2_White$Q : boolean;
    Pusher$__transit : boolean;
    Pusher$_state : {"INIT", INTERSTEP, INTERSTEP_2, CHECK_FOR_BLACK, THIRD_SLIDE_BLACK_WORKPIECES, WAIT_BLACK, RESET_INTERCONNECT3, SECOND_SLIDE_BLACK_WORKPIECES, SECOND_SLIDE_TIMER_BLACK, PUSHERY2_MOVE_OUT_BLACK, WAIT_Y2_BLACK, PUSHERY2_MOVE_IN_BLACK, RESET_INTERCONNECT_SLIDE2_BLACK, FIRST_SLIDE_BLACK_WORKPIECES, FIRST_SLIDE_TIMER_BLACK, PUSHERY1_MOVE_OUT_BLACK, WAIT_Y1_BLACK, PUSHERY1_MOVE_IN_BLACK, RESET_INTERCONNECT_SLIDE1_BLACK, CHECK_FOR_WHITE, FIRST_SLIDE_WHITE_WORKPIECES, FIRST_SLIDE_TIMER_WHITE, PUSHERY1_MOVE_OUT_WHITE, WAIT_Y1_WHITE, PUSHERY1_MOVE_IN_WHITE, RESET_INTERCONNECT_SLIDE1_WHITE, SECOND_SLIDE_WHITE_WORKPIECES, SECOND_TEST_FOR_WHITE, SECOND_SLIDE_TIMER_WHITE, PUSHERY2_MOVE_OUT_WHITE, WAIT_Y2_WHITE, PUSHERY2_MOVE_IN_WHITE, RESET_INTERCONNECT_SLIDE2_WHITE, THIRD_SLIDE_WHITE_WORKPIECES, WAIT_WHITE, RESET_INTERCONNECT_SLIDE3_WHITE, CHECK_FOR_METAL, FIRST_SLIDE_METAL_WORKPIECES, FIRST_SLIDE_TIMER_METAL, PUSHERY1_MOVE_OUT_METAL, WAIT_Y1_METAL, PUSHERY1_MOVE_IN_METAL, RESET_INTERCONNECT_SLIDE1_METAL, SECOND_SLIDE_METAL_WORKPIECES, SECOND_TEST_FOR_METAL, SECOND_SLIDE_TIMER_METAL, PUSHERY2_MOVE_OUT_METAL, WAIT_Y2_METAL, PUSHERY2_MOVE_IN_METAL, RESET_INTERCONNECT_SLIDE2_METAL, THIRD_SLIDE_METAL_WORKPIECES, WAIT_METAL, RESET_INTERCONNECT_SLIDE3_METAL};
    Pusher$interconnect2 : boolean;
    Pusher$interconnect3 : boolean;
    Pusher$interconnect_Slide1_Black : boolean;
    Pusher$interconnect_Slide1_Metal : boolean;
    Pusher$interconnect_Slide1_White : boolean;
    Pusher$interconnect_Slide2_Black : boolean;
    Pusher$interconnect_Slide2_Metal : boolean;
    Pusher$interconnect_Slide2_White : boolean;
    Stamp$CraneDown : boolean;
    Stamp$CraneOnConveyor : boolean;
    Stamp$CranePositionStamp : boolean;
    Stamp$CraneSucked : boolean;
    Stamp$CraneUp : boolean;
    Stamp$Duration : unsigned word[16];
    Stamp$SFCInit : boolean;
    Stamp$SFCPause : boolean;
    Stamp$SFCReset : boolean;
    Stamp$StampGreenLamp : boolean;
    Stamp$StampLowered : boolean;
    Stamp$StampPressure : boolean;
    Stamp$StampPusher : boolean;
    Stamp$StampSliderFilled : boolean;
    Stamp$StampSliderMovedIn : boolean;
    Stamp$StampSliderMovedOut : boolean;
    Stamp$StampSliderSensorMovedIn : boolean;
    Stamp$StampSliderSensorMovedOut : boolean;
    Stamp$StampStartButton : boolean;
    Stamp$StampUp : boolean;
    Stamp$StampWhiteLamp : boolean;
    Stamp$StartCommandStamp : boolean;
    Stamp$StartVar : boolean;
    Stamp$Timer$ET : unsigned word[16];
    Stamp$Timer$IN : boolean;
    Stamp$Timer$PT : unsigned word[16];
    Stamp$Timer$Q : boolean;
    Stamp$__transit : boolean;
    Stamp$_state : {"INIT", START_STAMP, GREEN_LAMP, STAMP_INIT_1, STAMP_INIT_2, STAMP_INIT_3, STAMP_INIT_4, INTERSTEP, INTERTSEP_2, STEP0, STAMPSLIDERBACK, STAMPPROCESS, STEP1, STAMPSLIDERFORWARD, STEP2};
    Stamp$interconnect : boolean;
    Stamp$interconnectStampStartCommand : boolean;
-- end of VAR
DEFINE
    bc_1402_1402_ := TRUE & (Stamp$SFCInit | Stamp$SFCReset);
    bc_1434_1434_ := TRUE & !((case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$SFCInit; 
    esac) | Stamp$SFCPause);
    bc_1434_000_ := TRUE & !!((case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$SFCInit; 
    esac) | Stamp$SFCPause);
    bc_1402_000_ := TRUE & !(Stamp$SFCInit | Stamp$SFCReset);
    bc_1445_000_ := TRUE & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = "INIT") & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = START_STAMP) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = GREEN_LAMP) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STAMP_INIT_1) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STAMP_INIT_2) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STAMP_INIT_3) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STAMP_INIT_4) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = INTERSTEP) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = INTERTSEP_2) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STEP0) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STAMPSLIDERBACK) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STAMPPROCESS) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STEP1) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STAMPSLIDERFORWARD) & (case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STEP2;
ASSIGN
    init(Actuator_AnalogCranePressure) := 0sd16_0;
    init(Actuator_CraneLower) := FALSE;
    init(Actuator_CraneTurnClockwise) := FALSE;
    init(Actuator_CraneTurnCounterclockwise) := FALSE;
    init(Actuator_MagazinGreenLamp) := FALSE;
    init(Actuator_MagazinSlider) := FALSE;
    init(Actuator_MagazinVacuumOff) := FALSE;
    init(Actuator_MagazinVacuumOn) := FALSE;
    init(Actuator_MagazinWhiteLamp) := FALSE;
    init(Actuator_PusherY1) := FALSE;
    init(Actuator_PusherY2) := FALSE;
    init(Actuator_SorterConveyorTowardsCrane) := FALSE;
    init(Actuator_SorterConveyorTowardsStacker) := FALSE;
    init(Actuator_SorterGreenLampConveyor) := FALSE;
    init(Actuator_SorterWhiteLampConveyor) := FALSE;
    init(Actuator_StampGreenLamp) := FALSE;
    init(Actuator_StampPusher) := FALSE;
    init(Actuator_StampSliderMovedIn) := FALSE;
    init(Actuator_StampSliderMovedOut) := FALSE;
    init(Actuator_StampWhiteLamp) := FALSE;
    init(Conveyor$Duration_Conveyor_Runtime) := 0ud16_0;
    init(Conveyor$Duration_Conveyor_Test) := 0ud16_0;
    init(Conveyor$SFCInit) := FALSE;
    init(Conveyor$SFCPause) := FALSE;
    init(Conveyor$SFCReset) := FALSE;
    init(Conveyor$SorterConveyorTowardsCrane) := FALSE;
    init(Conveyor$SorterConveyorTowardsStacker) := FALSE;
    init(Conveyor$SorterGreenLampConveyor) := FALSE;
    init(Conveyor$SorterLightbarrierCraneInterface) := FALSE;
    init(Conveyor$SorterStartButton) := FALSE;
    init(Conveyor$SorterSwitchManuellAutomatic) := FALSE;
    init(Conveyor$SorterWhiteLampConveyor) := FALSE;
    init(Conveyor$StartCommandConveyor) := FALSE;
    init(Conveyor$StartVar) := FALSE;
    init(Conveyor$Timer_Conveyor_Runtime$ET) := 0ud16_0;
    init(Conveyor$Timer_Conveyor_Runtime$IN) := FALSE;
    init(Conveyor$Timer_Conveyor_Runtime$PT) := 0ud16_0;
    init(Conveyor$Timer_Conveyor_Runtime$Q) := FALSE;
    init(Conveyor$Timer_Conveyor_Test$ET) := 0ud16_0;
    init(Conveyor$Timer_Conveyor_Test$IN) := FALSE;
    init(Conveyor$Timer_Conveyor_Test$PT) := 0ud16_0;
    init(Conveyor$Timer_Conveyor_Test$Q) := FALSE;
    init(Conveyor$__transit) := FALSE;
    init(Conveyor$_state) := "INIT";
    init(Conveyor$interconnectConveyorStartCommand) := FALSE;
    init(Conveyor$interconnectConveyorTerminationCommand) := FALSE;
    init(Conveyor$interconnect_Conveyor_Runtime) := FALSE;
    init(Conveyor$interconnect_Conveyor_Test) := FALSE;
    init(Crane$AnalogCranePressure) := 0sd16_0;
    init(Crane$CraneDown) := FALSE;
    init(Crane$CraneLower) := FALSE;
    init(Crane$CraneOnConveyor) := FALSE;
    init(Crane$CraneOnMagazin) := FALSE;
    init(Crane$CranePositionStamp) := FALSE;
    init(Crane$CraneSucked) := FALSE;
    init(Crane$CraneTurnClockwise) := FALSE;
    init(Crane$CraneTurnCounterclockwise) := FALSE;
    init(Crane$CraneUp) := FALSE;
    init(Crane$Duration1) := 0ud16_0;
    init(Crane$MagazinCapacitiveSensor) := FALSE;
    init(Crane$MagazinOpticalSensor) := FALSE;
    init(Crane$MagazinVacuumOff) := FALSE;
    init(Crane$MagazinVacuumOn) := FALSE;
    init(Crane$SFCInit) := FALSE;
    init(Crane$SFCPause) := FALSE;
    init(Crane$SFCReset) := FALSE;
    init(Crane$SliderMovedOut) := FALSE;
    init(Crane$SliderNotMovedOut) := FALSE;
    init(Crane$StampLowered) := FALSE;
    init(Crane$StampSliderFilled) := FALSE;
    init(Crane$StampSliderSensorMovedOut) := FALSE;
    init(Crane$StartButtonMagazin) := FALSE;
    init(Crane$StartCommandCrane) := FALSE;
    init(Crane$StartVar) := FALSE;
    init(Crane$TimeDelay_Timer$ET) := 0ud16_0;
    init(Crane$TimeDelay_Timer$IN) := FALSE;
    init(Crane$TimeDelay_Timer$PT) := 0ud16_0;
    init(Crane$TimeDelay_Timer$Q) := FALSE;
    init(Crane$TimeDelay_Timer_Duration) := 0ud16_0;
    init(Crane$TimeDelay_Timer_interconnect) := FALSE;
    init(Crane$Timer1$ET) := 0ud16_0;
    init(Crane$Timer1$IN) := FALSE;
    init(Crane$Timer1$PT) := 0ud16_0;
    init(Crane$Timer1$Q) := FALSE;
    init(Crane$WorkpieceReady) := FALSE;
    init(Crane$__transit) := FALSE;
    init(Crane$_state) := "INIT";
    init(Crane$actualtime1) := 0ud16_0;
    init(Crane$interconnect) := FALSE;
    init(Crane$interconnectCraneStartCommand) := FALSE;
    init(Mag$CraneDown) := FALSE;
    init(Mag$CraneLower) := FALSE;
    init(Mag$CraneOnConveyor) := FALSE;
    init(Mag$CraneOnMagazin) := FALSE;
    init(Mag$CraneSucked) := FALSE;
    init(Mag$CraneTurnClockwise) := FALSE;
    init(Mag$CraneTurnCounterclockwise) := FALSE;
    init(Mag$CraneUp) := FALSE;
    init(Mag$MagazinGreenLamp) := FALSE;
    init(Mag$MagazinSlider) := FALSE;
    init(Mag$MagazinVacuumOff) := FALSE;
    init(Mag$MagazinVacuumOn) := FALSE;
    init(Mag$MagazinWhiteLamp) := FALSE;
    init(Mag$SFCInit) := FALSE;
    init(Mag$SFCPause) := FALSE;
    init(Mag$SFCReset) := FALSE;
    init(Mag$SliderMovedOut) := FALSE;
    init(Mag$SliderNotMovedOut) := FALSE;
    init(Mag$StartButtonMagazin) := FALSE;
    init(Mag$StartCommandMagazin) := FALSE;
    init(Mag$StartVar) := FALSE;
    init(Mag$WorkpieceReady) := FALSE;
    init(Mag$__transit) := FALSE;
    init(Mag$_state) := "INIT";
    init(Mag$interconnectMagazinStartCommand) := FALSE;
    init(Main$Conveyor$0$Conveyor$SFCReset__input) := FALSE;
    init(Main$Conveyor$0$Conveyor$SorterLightbarrierCraneInterface__input) := FALSE;
    init(Main$Conveyor$0$Conveyor$SorterStartButton__input) := FALSE;
    init(Main$Conveyor$0$Conveyor$SorterSwitchManuellAutomatic__input) := FALSE;
    init(Main$Conveyor$0$Conveyor$StartVar__input) := FALSE;
    init(Main$Conveyor$Timer_Conveyor_Runtime_ccnt) := 0ud8_0;
    init(Main$Conveyor$Timer_Conveyor_Test_ccnt) := 0ud8_0;
    init(Main$Conveyor_ccnt) := 0ud8_0;
    init(Main$Crane$0$Crane$CraneDown__input) := FALSE;
    init(Main$Crane$0$Crane$CraneOnConveyor__input) := FALSE;
    init(Main$Crane$0$Crane$CraneOnMagazin__input) := FALSE;
    init(Main$Crane$0$Crane$CranePositionStamp__input) := FALSE;
    init(Main$Crane$0$Crane$CraneSucked__input) := FALSE;
    init(Main$Crane$0$Crane$CraneUp__input) := FALSE;
    init(Main$Crane$0$Crane$MagazinCapacitiveSensor__input) := FALSE;
    init(Main$Crane$0$Crane$MagazinOpticalSensor__input) := FALSE;
    init(Main$Crane$0$Crane$SFCReset__input) := FALSE;
    init(Main$Crane$0$Crane$SliderMovedOut__input) := FALSE;
    init(Main$Crane$0$Crane$SliderNotMovedOut__input) := FALSE;
    init(Main$Crane$0$Crane$StampLowered__input) := FALSE;
    init(Main$Crane$0$Crane$StampSliderFilled__input) := FALSE;
    init(Main$Crane$0$Crane$StampSliderSensorMovedOut__input) := FALSE;
    init(Main$Crane$0$Crane$StartButtonMagazin__input) := FALSE;
    init(Main$Crane$0$Crane$StartVar__input) := FALSE;
    init(Main$Crane$0$Crane$WorkpieceReady__input) := FALSE;
    init(Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$IN__input) := FALSE;
    init(Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$PT__input) := 0ud16_0;
    init(Main$Crane$TimeDelay_Timer_ccnt) := 0ud8_0;
    init(Main$Crane$Timer1$0$Crane$Timer1$IN__input) := FALSE;
    init(Main$Crane$Timer1$0$Crane$Timer1$PT__input) := 0ud16_0;
    init(Main$Crane$Timer1$1$Crane$Timer1$IN__input) := FALSE;
    init(Main$Crane$Timer1$1$Crane$Timer1$PT__input) := 0ud16_0;
    init(Main$Crane$Timer1_ccnt) := 0ud8_0;
    init(Main$Crane_ccnt) := 0ud8_0;
    init(Main$Mag$0$Mag$CraneDown__input) := FALSE;
    init(Main$Mag$0$Mag$CraneOnConveyor__input) := FALSE;
    init(Main$Mag$0$Mag$CraneOnMagazin__input) := FALSE;
    init(Main$Mag$0$Mag$CraneSucked__input) := FALSE;
    init(Main$Mag$0$Mag$CraneUp__input) := FALSE;
    init(Main$Mag$0$Mag$SFCReset__input) := FALSE;
    init(Main$Mag$0$Mag$SliderMovedOut__input) := FALSE;
    init(Main$Mag$0$Mag$SliderNotMovedOut__input) := FALSE;
    init(Main$Mag$0$Mag$StartButtonMagazin__input) := FALSE;
    init(Main$Mag$0$Mag$StartVar__input) := FALSE;
    init(Main$Mag$0$Mag$WorkpieceReady__input) := FALSE;
    init(Main$Mag_ccnt) := 0ud8_0;
    init(Main$Pusher$0$Pusher$SFCReset__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher1__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher2__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterLightbarrierCraneInterface__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterLightnessSensorPusher1__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterLightnessSensorPusher2__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterLightnessSensorPusher3__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterLightnesssensorCraneInterfaceInverse__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterPusher1MovedIn__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterPusher1MovedOut__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterPusher2MovedIn__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterPusher2MovedOut__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterStartButton__input) := FALSE;
    init(Main$Pusher$0$Pusher$StartVar__input) := FALSE;
    init(Main$Pusher$Timer2_ccnt) := 0ud8_0;
    init(Main$Pusher$Timer3_ccnt) := 0ud8_0;
    init(Main$Pusher$Timer_Slide1_Black_ccnt) := 0ud8_0;
    init(Main$Pusher$Timer_Slide1_Metal_ccnt) := 0ud8_0;
    init(Main$Pusher$Timer_Slide1_White_ccnt) := 0ud8_0;
    init(Main$Pusher$Timer_Slide2_Black_ccnt) := 0ud8_0;
    init(Main$Pusher$Timer_Slide2_Metal_ccnt) := 0ud8_0;
    init(Main$Pusher$Timer_Slide2_White_ccnt) := 0ud8_0;
    init(Main$Pusher_ccnt) := 0ud8_0;
    init(Main$Stamp$0$Stamp$CraneDown__input) := FALSE;
    init(Main$Stamp$0$Stamp$CraneOnConveyor__input) := FALSE;
    init(Main$Stamp$0$Stamp$CranePositionStamp__input) := FALSE;
    init(Main$Stamp$0$Stamp$CraneSucked__input) := FALSE;
    init(Main$Stamp$0$Stamp$CraneUp__input) := FALSE;
    init(Main$Stamp$0$Stamp$SFCReset__input) := FALSE;
    init(Main$Stamp$0$Stamp$StampLowered__input) := FALSE;
    init(Main$Stamp$0$Stamp$StampSliderFilled__input) := FALSE;
    init(Main$Stamp$0$Stamp$StampSliderSensorMovedIn__input) := FALSE;
    init(Main$Stamp$0$Stamp$StampSliderSensorMovedOut__input) := FALSE;
    init(Main$Stamp$0$Stamp$StampStartButton__input) := FALSE;
    init(Main$Stamp$0$Stamp$StampUp__input) := FALSE;
    init(Main$Stamp$0$Stamp$StartVar__input) := FALSE;
    init(Main$Stamp$Timer$0$Stamp$Timer$IN__input) := FALSE;
    init(Main$Stamp$Timer$0$Stamp$Timer$PT__input) := 0ud16_0;
    init(Main$Stamp$Timer$1$Stamp$Timer$IN__input) := FALSE;
    init(Main$Stamp$Timer$1$Stamp$Timer$PT__input) := 0ud16_0;
    init(Main$Stamp$Timer_ccnt) := 0ud8_0;
    init(Main$Stamp_ccnt) := 0ud8_0;
    init(Pusher$Duration2) := 0ud16_0;
    init(Pusher$Duration3) := 0ud16_0;
    init(Pusher$Duration_Slide1_Black) := 0ud16_0;
    init(Pusher$Duration_Slide1_Metal) := 0ud16_0;
    init(Pusher$Duration_Slide1_White) := 0ud16_0;
    init(Pusher$Duration_Slide2_Black) := 0ud16_0;
    init(Pusher$Duration_Slide2_Metal) := 0ud16_0;
    init(Pusher$Duration_Slide2_White) := 0ud16_0;
    init(Pusher$Priority_Var_Black) := 0sd16_3;
    init(Pusher$Priority_Var_Metal) := 0sd16_3;
    init(Pusher$Priority_Var_White) := 0sd16_3;
    init(Pusher$PusherY1) := FALSE;
    init(Pusher$PusherY2) := FALSE;
    init(Pusher$SFCInit) := FALSE;
    init(Pusher$SFCPause) := FALSE;
    init(Pusher$SFCReset) := FALSE;
    init(Pusher$Slide1_black) := 0sd16_1;
    init(Pusher$Slide1_metal) := 0sd16_1;
    init(Pusher$Slide1_white) := 0sd16_1;
    init(Pusher$Slide2_black) := 0sd16_1;
    init(Pusher$Slide2_metal) := 0sd16_1;
    init(Pusher$Slide2_white) := 0sd16_1;
    init(Pusher$Slide3_black) := 0sd16_1;
    init(Pusher$Slide3_metal) := 0sd16_1;
    init(Pusher$Slide3_white) := 0sd16_1;
    init(Pusher$SorterCapacitiveSensorPusher1) := FALSE;
    init(Pusher$SorterCapacitiveSensorPusher2) := FALSE;
    init(Pusher$SorterLightbarrierCraneInterface) := FALSE;
    init(Pusher$SorterLightnessSensorPusher1) := FALSE;
    init(Pusher$SorterLightnessSensorPusher2) := FALSE;
    init(Pusher$SorterLightnessSensorPusher3) := FALSE;
    init(Pusher$SorterLightnesssensorCraneInterfaceInverse) := FALSE;
    init(Pusher$SorterPusher1MovedIn) := FALSE;
    init(Pusher$SorterPusher1MovedOut) := FALSE;
    init(Pusher$SorterPusher2MovedIn) := FALSE;
    init(Pusher$SorterPusher2MovedOut) := FALSE;
    init(Pusher$SorterStartButton) := FALSE;
    init(Pusher$StartVar) := FALSE;
    init(Pusher$Timer2$ET) := 0ud16_0;
    init(Pusher$Timer2$IN) := FALSE;
    init(Pusher$Timer2$PT) := 0ud16_0;
    init(Pusher$Timer2$Q) := FALSE;
    init(Pusher$Timer3$ET) := 0ud16_0;
    init(Pusher$Timer3$IN) := FALSE;
    init(Pusher$Timer3$PT) := 0ud16_0;
    init(Pusher$Timer3$Q) := FALSE;
    init(Pusher$Timer_Slide1_Black$ET) := 0ud16_0;
    init(Pusher$Timer_Slide1_Black$IN) := FALSE;
    init(Pusher$Timer_Slide1_Black$PT) := 0ud16_0;
    init(Pusher$Timer_Slide1_Black$Q) := FALSE;
    init(Pusher$Timer_Slide1_Metal$ET) := 0ud16_0;
    init(Pusher$Timer_Slide1_Metal$IN) := FALSE;
    init(Pusher$Timer_Slide1_Metal$PT) := 0ud16_0;
    init(Pusher$Timer_Slide1_Metal$Q) := FALSE;
    init(Pusher$Timer_Slide1_White$ET) := 0ud16_0;
    init(Pusher$Timer_Slide1_White$IN) := FALSE;
    init(Pusher$Timer_Slide1_White$PT) := 0ud16_0;
    init(Pusher$Timer_Slide1_White$Q) := FALSE;
    init(Pusher$Timer_Slide2_Black$ET) := 0ud16_0;
    init(Pusher$Timer_Slide2_Black$IN) := FALSE;
    init(Pusher$Timer_Slide2_Black$PT) := 0ud16_0;
    init(Pusher$Timer_Slide2_Black$Q) := FALSE;
    init(Pusher$Timer_Slide2_Metal$ET) := 0ud16_0;
    init(Pusher$Timer_Slide2_Metal$IN) := FALSE;
    init(Pusher$Timer_Slide2_Metal$PT) := 0ud16_0;
    init(Pusher$Timer_Slide2_Metal$Q) := FALSE;
    init(Pusher$Timer_Slide2_White$ET) := 0ud16_0;
    init(Pusher$Timer_Slide2_White$IN) := FALSE;
    init(Pusher$Timer_Slide2_White$PT) := 0ud16_0;
    init(Pusher$Timer_Slide2_White$Q) := FALSE;
    init(Pusher$__transit) := FALSE;
    init(Pusher$_state) := "INIT";
    init(Pusher$interconnect2) := FALSE;
    init(Pusher$interconnect3) := FALSE;
    init(Pusher$interconnect_Slide1_Black) := FALSE;
    init(Pusher$interconnect_Slide1_Metal) := FALSE;
    init(Pusher$interconnect_Slide1_White) := FALSE;
    init(Pusher$interconnect_Slide2_Black) := FALSE;
    init(Pusher$interconnect_Slide2_Metal) := FALSE;
    init(Pusher$interconnect_Slide2_White) := FALSE;
    init(Stamp$CraneDown) := FALSE;
    init(Stamp$CraneOnConveyor) := FALSE;
    init(Stamp$CranePositionStamp) := FALSE;
    init(Stamp$CraneSucked) := FALSE;
    init(Stamp$CraneUp) := FALSE;
    init(Stamp$Duration) := 0ud16_0;
    init(Stamp$SFCInit) := FALSE;
    init(Stamp$SFCPause) := FALSE;
    init(Stamp$SFCReset) := FALSE;
    init(Stamp$StampGreenLamp) := FALSE;
    init(Stamp$StampLowered) := FALSE;
    init(Stamp$StampPressure) := FALSE;
    init(Stamp$StampPusher) := FALSE;
    init(Stamp$StampSliderFilled) := FALSE;
    init(Stamp$StampSliderMovedIn) := FALSE;
    init(Stamp$StampSliderMovedOut) := FALSE;
    init(Stamp$StampSliderSensorMovedIn) := FALSE;
    init(Stamp$StampSliderSensorMovedOut) := FALSE;
    init(Stamp$StampStartButton) := FALSE;
    init(Stamp$StampUp) := FALSE;
    init(Stamp$StampWhiteLamp) := FALSE;
    init(Stamp$StartCommandStamp) := FALSE;
    init(Stamp$StartVar) := FALSE;
    init(Stamp$Timer$ET) := 0ud16_0;
    init(Stamp$Timer$IN) := FALSE;
    init(Stamp$Timer$PT) := 0ud16_0;
    init(Stamp$Timer$Q) := FALSE;
    init(Stamp$__transit) := FALSE;
    init(Stamp$_state) := "INIT";
    init(Stamp$interconnect) := FALSE;
    init(Stamp$interconnectStampStartCommand) := FALSE;
    next(Actuator_AnalogCranePressure) := Actuator_AnalogCranePressure;
    next(Actuator_CraneLower) := Actuator_CraneLower;
    next(Actuator_CraneTurnClockwise) := Actuator_CraneTurnClockwise;
    next(Actuator_CraneTurnCounterclockwise) := Actuator_CraneTurnCounterclockwise;
    next(Actuator_MagazinGreenLamp) := Actuator_MagazinGreenLamp;
    next(Actuator_MagazinSlider) := Actuator_MagazinSlider;
    next(Actuator_MagazinVacuumOff) := Actuator_MagazinVacuumOff;
    next(Actuator_MagazinVacuumOn) := Actuator_MagazinVacuumOn;
    next(Actuator_MagazinWhiteLamp) := Actuator_MagazinWhiteLamp;
    next(Actuator_PusherY1) := Actuator_PusherY1;
    next(Actuator_PusherY2) := Actuator_PusherY2;
    next(Actuator_SorterConveyorTowardsCrane) := Actuator_SorterConveyorTowardsCrane;
    next(Actuator_SorterConveyorTowardsStacker) := Actuator_SorterConveyorTowardsStacker;
    next(Actuator_SorterGreenLampConveyor) := Actuator_SorterGreenLampConveyor;
    next(Actuator_SorterWhiteLampConveyor) := Actuator_SorterWhiteLampConveyor;
    next(Actuator_StampGreenLamp) := Actuator_StampGreenLamp;
    next(Actuator_StampPusher) := Actuator_StampPusher;
    next(Actuator_StampSliderMovedIn) := Actuator_StampSliderMovedIn;
    next(Actuator_StampSliderMovedOut) := Actuator_StampSliderMovedOut;
    next(Actuator_StampWhiteLamp) := Actuator_StampWhiteLamp;
    next(Conveyor$Duration_Conveyor_Runtime) := Conveyor$Duration_Conveyor_Runtime;
    next(Conveyor$Duration_Conveyor_Test) := Conveyor$Duration_Conveyor_Test;
    next(Conveyor$SFCInit) := Conveyor$SFCInit;
    next(Conveyor$SFCPause) := Conveyor$SFCPause;
    next(Conveyor$SFCReset) := Conveyor$SFCReset;
    next(Conveyor$SorterConveyorTowardsCrane) := Conveyor$SorterConveyorTowardsCrane;
    next(Conveyor$SorterConveyorTowardsStacker) := Conveyor$SorterConveyorTowardsStacker;
    next(Conveyor$SorterGreenLampConveyor) := Conveyor$SorterGreenLampConveyor;
    next(Conveyor$SorterLightbarrierCraneInterface) := Conveyor$SorterLightbarrierCraneInterface;
    next(Conveyor$SorterStartButton) := Conveyor$SorterStartButton;
    next(Conveyor$SorterSwitchManuellAutomatic) := Conveyor$SorterSwitchManuellAutomatic;
    next(Conveyor$SorterWhiteLampConveyor) := Conveyor$SorterWhiteLampConveyor;
    next(Conveyor$StartCommandConveyor) := Conveyor$StartCommandConveyor;
    next(Conveyor$StartVar) := Conveyor$StartVar;
    next(Conveyor$Timer_Conveyor_Runtime$ET) := Conveyor$Timer_Conveyor_Runtime$ET;
    next(Conveyor$Timer_Conveyor_Runtime$IN) := Conveyor$Timer_Conveyor_Runtime$IN;
    next(Conveyor$Timer_Conveyor_Runtime$PT) := Conveyor$Timer_Conveyor_Runtime$PT;
    next(Conveyor$Timer_Conveyor_Runtime$Q) := Conveyor$Timer_Conveyor_Runtime$Q;
    next(Conveyor$Timer_Conveyor_Test$ET) := Conveyor$Timer_Conveyor_Test$ET;
    next(Conveyor$Timer_Conveyor_Test$IN) := Conveyor$Timer_Conveyor_Test$IN;
    next(Conveyor$Timer_Conveyor_Test$PT) := Conveyor$Timer_Conveyor_Test$PT;
    next(Conveyor$Timer_Conveyor_Test$Q) := Conveyor$Timer_Conveyor_Test$Q;
    next(Conveyor$__transit) := Conveyor$__transit;
    next(Conveyor$_state) := Conveyor$_state;
    next(Conveyor$interconnectConveyorStartCommand) := Conveyor$interconnectConveyorStartCommand;
    next(Conveyor$interconnectConveyorTerminationCommand) := Conveyor$interconnectConveyorTerminationCommand;
    next(Conveyor$interconnect_Conveyor_Runtime) := Conveyor$interconnect_Conveyor_Runtime;
    next(Conveyor$interconnect_Conveyor_Test) := Conveyor$interconnect_Conveyor_Test;
    next(Crane$AnalogCranePressure) := Crane$AnalogCranePressure;
    next(Crane$CraneDown) := Crane$CraneDown;
    next(Crane$CraneLower) := Crane$CraneLower;
    next(Crane$CraneOnConveyor) := Crane$CraneOnConveyor;
    next(Crane$CraneOnMagazin) := Crane$CraneOnMagazin;
    next(Crane$CranePositionStamp) := Crane$CranePositionStamp;
    next(Crane$CraneSucked) := Crane$CraneSucked;
    next(Crane$CraneTurnClockwise) := Crane$CraneTurnClockwise;
    next(Crane$CraneTurnCounterclockwise) := Crane$CraneTurnCounterclockwise;
    next(Crane$CraneUp) := Crane$CraneUp;
    next(Crane$Duration1) := Crane$Duration1;
    next(Crane$MagazinCapacitiveSensor) := Crane$MagazinCapacitiveSensor;
    next(Crane$MagazinOpticalSensor) := Crane$MagazinOpticalSensor;
    next(Crane$MagazinVacuumOff) := Crane$MagazinVacuumOff;
    next(Crane$MagazinVacuumOn) := Crane$MagazinVacuumOn;
    next(Crane$SFCInit) := Crane$SFCInit;
    next(Crane$SFCPause) := Crane$SFCPause;
    next(Crane$SFCReset) := Crane$SFCReset;
    next(Crane$SliderMovedOut) := Crane$SliderMovedOut;
    next(Crane$SliderNotMovedOut) := Crane$SliderNotMovedOut;
    next(Crane$StampLowered) := Crane$StampLowered;
    next(Crane$StampSliderFilled) := Crane$StampSliderFilled;
    next(Crane$StampSliderSensorMovedOut) := Crane$StampSliderSensorMovedOut;
    next(Crane$StartButtonMagazin) := Crane$StartButtonMagazin;
    next(Crane$StartCommandCrane) := Crane$StartCommandCrane;
    next(Crane$StartVar) := Crane$StartVar;
    next(Crane$TimeDelay_Timer$ET) := Crane$TimeDelay_Timer$ET;
    next(Crane$TimeDelay_Timer$IN) := Crane$TimeDelay_Timer$IN;
    next(Crane$TimeDelay_Timer$PT) := Crane$TimeDelay_Timer$PT;
    next(Crane$TimeDelay_Timer$Q) := Crane$TimeDelay_Timer$Q;
    next(Crane$TimeDelay_Timer_Duration) := Crane$TimeDelay_Timer_Duration;
    next(Crane$TimeDelay_Timer_interconnect) := Crane$TimeDelay_Timer_interconnect;
    next(Crane$Timer1$ET) := Crane$Timer1$ET;
    next(Crane$Timer1$IN) := Crane$Timer1$IN;
    next(Crane$Timer1$PT) := Crane$Timer1$PT;
    next(Crane$Timer1$Q) := Crane$Timer1$Q;
    next(Crane$WorkpieceReady) := Crane$WorkpieceReady;
    next(Crane$__transit) := Crane$__transit;
    next(Crane$_state) := Crane$_state;
    next(Crane$actualtime1) := Crane$actualtime1;
    next(Crane$interconnect) := Crane$interconnect;
    next(Crane$interconnectCraneStartCommand) := Crane$interconnectCraneStartCommand;
    next(Mag$CraneDown) := Mag$CraneDown;
    next(Mag$CraneLower) := Mag$CraneLower;
    next(Mag$CraneOnConveyor) := Mag$CraneOnConveyor;
    next(Mag$CraneOnMagazin) := Mag$CraneOnMagazin;
    next(Mag$CraneSucked) := Mag$CraneSucked;
    next(Mag$CraneTurnClockwise) := Mag$CraneTurnClockwise;
    next(Mag$CraneTurnCounterclockwise) := Mag$CraneTurnCounterclockwise;
    next(Mag$CraneUp) := Mag$CraneUp;
    next(Mag$MagazinGreenLamp) := Mag$MagazinGreenLamp;
    next(Mag$MagazinSlider) := Mag$MagazinSlider;
    next(Mag$MagazinVacuumOff) := Mag$MagazinVacuumOff;
    next(Mag$MagazinVacuumOn) := Mag$MagazinVacuumOn;
    next(Mag$MagazinWhiteLamp) := Mag$MagazinWhiteLamp;
    next(Mag$SFCInit) := Mag$SFCInit;
    next(Mag$SFCPause) := Mag$SFCPause;
    next(Mag$SFCReset) := Mag$SFCReset;
    next(Mag$SliderMovedOut) := Mag$SliderMovedOut;
    next(Mag$SliderNotMovedOut) := Mag$SliderNotMovedOut;
    next(Mag$StartButtonMagazin) := Mag$StartButtonMagazin;
    next(Mag$StartCommandMagazin) := Mag$StartCommandMagazin;
    next(Mag$StartVar) := Mag$StartVar;
    next(Mag$WorkpieceReady) := Mag$WorkpieceReady;
    next(Mag$__transit) := Mag$__transit;
    next(Mag$_state) := Mag$_state;
    next(Mag$interconnectMagazinStartCommand) := Mag$interconnectMagazinStartCommand;
    next(Main$Conveyor$0$Conveyor$SFCReset__input) := Main$Conveyor$0$Conveyor$SFCReset__input;
    next(Main$Conveyor$0$Conveyor$SorterLightbarrierCraneInterface__input) := Main$Conveyor$0$Conveyor$SorterLightbarrierCraneInterface__input;
    next(Main$Conveyor$0$Conveyor$SorterStartButton__input) := Main$Conveyor$0$Conveyor$SorterStartButton__input;
    next(Main$Conveyor$0$Conveyor$SorterSwitchManuellAutomatic__input) := Main$Conveyor$0$Conveyor$SorterSwitchManuellAutomatic__input;
    next(Main$Conveyor$0$Conveyor$StartVar__input) := Main$Conveyor$0$Conveyor$StartVar__input;
    next(Main$Conveyor$Timer_Conveyor_Runtime_ccnt) := Main$Conveyor$Timer_Conveyor_Runtime_ccnt;
    next(Main$Conveyor$Timer_Conveyor_Test_ccnt) := Main$Conveyor$Timer_Conveyor_Test_ccnt;
    next(Main$Conveyor_ccnt) := Main$Conveyor_ccnt;
    next(Main$Crane$0$Crane$CraneDown__input) := Main$Crane$0$Crane$CraneDown__input;
    next(Main$Crane$0$Crane$CraneOnConveyor__input) := Main$Crane$0$Crane$CraneOnConveyor__input;
    next(Main$Crane$0$Crane$CraneOnMagazin__input) := Main$Crane$0$Crane$CraneOnMagazin__input;
    next(Main$Crane$0$Crane$CranePositionStamp__input) := Main$Crane$0$Crane$CranePositionStamp__input;
    next(Main$Crane$0$Crane$CraneSucked__input) := Main$Crane$0$Crane$CraneSucked__input;
    next(Main$Crane$0$Crane$CraneUp__input) := Main$Crane$0$Crane$CraneUp__input;
    next(Main$Crane$0$Crane$MagazinCapacitiveSensor__input) := Main$Crane$0$Crane$MagazinCapacitiveSensor__input;
    next(Main$Crane$0$Crane$MagazinOpticalSensor__input) := Main$Crane$0$Crane$MagazinOpticalSensor__input;
    next(Main$Crane$0$Crane$SFCReset__input) := Main$Crane$0$Crane$SFCReset__input;
    next(Main$Crane$0$Crane$SliderMovedOut__input) := Main$Crane$0$Crane$SliderMovedOut__input;
    next(Main$Crane$0$Crane$SliderNotMovedOut__input) := Main$Crane$0$Crane$SliderNotMovedOut__input;
    next(Main$Crane$0$Crane$StampLowered__input) := Main$Crane$0$Crane$StampLowered__input;
    next(Main$Crane$0$Crane$StampSliderFilled__input) := Main$Crane$0$Crane$StampSliderFilled__input;
    next(Main$Crane$0$Crane$StampSliderSensorMovedOut__input) := Main$Crane$0$Crane$StampSliderSensorMovedOut__input;
    next(Main$Crane$0$Crane$StartButtonMagazin__input) := Main$Crane$0$Crane$StartButtonMagazin__input;
    next(Main$Crane$0$Crane$StartVar__input) := Main$Crane$0$Crane$StartVar__input;
    next(Main$Crane$0$Crane$WorkpieceReady__input) := Main$Crane$0$Crane$WorkpieceReady__input;
    next(Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$IN__input) := Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$IN__input;
    next(Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$PT__input) := Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$PT__input;
    next(Main$Crane$TimeDelay_Timer_ccnt) := Main$Crane$TimeDelay_Timer_ccnt;
    next(Main$Crane$Timer1$0$Crane$Timer1$IN__input) := Main$Crane$Timer1$0$Crane$Timer1$IN__input;
    next(Main$Crane$Timer1$0$Crane$Timer1$PT__input) := Main$Crane$Timer1$0$Crane$Timer1$PT__input;
    next(Main$Crane$Timer1$1$Crane$Timer1$IN__input) := Main$Crane$Timer1$1$Crane$Timer1$IN__input;
    next(Main$Crane$Timer1$1$Crane$Timer1$PT__input) := Main$Crane$Timer1$1$Crane$Timer1$PT__input;
    next(Main$Crane$Timer1_ccnt) := Main$Crane$Timer1_ccnt;
    next(Main$Crane_ccnt) := Main$Crane_ccnt;
    next(Main$Mag$0$Mag$CraneDown__input) := Main$Mag$0$Mag$CraneDown__input;
    next(Main$Mag$0$Mag$CraneOnConveyor__input) := Main$Mag$0$Mag$CraneOnConveyor__input;
    next(Main$Mag$0$Mag$CraneOnMagazin__input) := Main$Mag$0$Mag$CraneOnMagazin__input;
    next(Main$Mag$0$Mag$CraneSucked__input) := Main$Mag$0$Mag$CraneSucked__input;
    next(Main$Mag$0$Mag$CraneUp__input) := Main$Mag$0$Mag$CraneUp__input;
    next(Main$Mag$0$Mag$SFCReset__input) := Main$Mag$0$Mag$SFCReset__input;
    next(Main$Mag$0$Mag$SliderMovedOut__input) := Main$Mag$0$Mag$SliderMovedOut__input;
    next(Main$Mag$0$Mag$SliderNotMovedOut__input) := Main$Mag$0$Mag$SliderNotMovedOut__input;
    next(Main$Mag$0$Mag$StartButtonMagazin__input) := Main$Mag$0$Mag$StartButtonMagazin__input;
    next(Main$Mag$0$Mag$StartVar__input) := Main$Mag$0$Mag$StartVar__input;
    next(Main$Mag$0$Mag$WorkpieceReady__input) := Main$Mag$0$Mag$WorkpieceReady__input;
    next(Main$Mag_ccnt) := Main$Mag_ccnt;
    next(Main$Pusher$0$Pusher$SFCReset__input) := Main$Pusher$0$Pusher$SFCReset__input;
    next(Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher1__input) := Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher1__input;
    next(Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher2__input) := Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher2__input;
    next(Main$Pusher$0$Pusher$SorterLightbarrierCraneInterface__input) := Main$Pusher$0$Pusher$SorterLightbarrierCraneInterface__input;
    next(Main$Pusher$0$Pusher$SorterLightnessSensorPusher1__input) := Main$Pusher$0$Pusher$SorterLightnessSensorPusher1__input;
    next(Main$Pusher$0$Pusher$SorterLightnessSensorPusher2__input) := Main$Pusher$0$Pusher$SorterLightnessSensorPusher2__input;
    next(Main$Pusher$0$Pusher$SorterLightnessSensorPusher3__input) := Main$Pusher$0$Pusher$SorterLightnessSensorPusher3__input;
    next(Main$Pusher$0$Pusher$SorterLightnesssensorCraneInterfaceInverse__input) := Main$Pusher$0$Pusher$SorterLightnesssensorCraneInterfaceInverse__input;
    next(Main$Pusher$0$Pusher$SorterPusher1MovedIn__input) := Main$Pusher$0$Pusher$SorterPusher1MovedIn__input;
    next(Main$Pusher$0$Pusher$SorterPusher1MovedOut__input) := Main$Pusher$0$Pusher$SorterPusher1MovedOut__input;
    next(Main$Pusher$0$Pusher$SorterPusher2MovedIn__input) := Main$Pusher$0$Pusher$SorterPusher2MovedIn__input;
    next(Main$Pusher$0$Pusher$SorterPusher2MovedOut__input) := Main$Pusher$0$Pusher$SorterPusher2MovedOut__input;
    next(Main$Pusher$0$Pusher$SorterStartButton__input) := Main$Pusher$0$Pusher$SorterStartButton__input;
    next(Main$Pusher$0$Pusher$StartVar__input) := Main$Pusher$0$Pusher$StartVar__input;
    next(Main$Pusher$Timer2_ccnt) := Main$Pusher$Timer2_ccnt;
    next(Main$Pusher$Timer3_ccnt) := Main$Pusher$Timer3_ccnt;
    next(Main$Pusher$Timer_Slide1_Black_ccnt) := Main$Pusher$Timer_Slide1_Black_ccnt;
    next(Main$Pusher$Timer_Slide1_Metal_ccnt) := Main$Pusher$Timer_Slide1_Metal_ccnt;
    next(Main$Pusher$Timer_Slide1_White_ccnt) := Main$Pusher$Timer_Slide1_White_ccnt;
    next(Main$Pusher$Timer_Slide2_Black_ccnt) := Main$Pusher$Timer_Slide2_Black_ccnt;
    next(Main$Pusher$Timer_Slide2_Metal_ccnt) := Main$Pusher$Timer_Slide2_Metal_ccnt;
    next(Main$Pusher$Timer_Slide2_White_ccnt) := Main$Pusher$Timer_Slide2_White_ccnt;
    next(Main$Pusher_ccnt) := Main$Pusher_ccnt;
    next(Main$Stamp$0$Stamp$CraneDown__input) := Main$Stamp$0$Stamp$CraneDown__input;
    next(Main$Stamp$0$Stamp$CraneOnConveyor__input) := Main$Stamp$0$Stamp$CraneOnConveyor__input;
    next(Main$Stamp$0$Stamp$CranePositionStamp__input) := Main$Stamp$0$Stamp$CranePositionStamp__input;
    next(Main$Stamp$0$Stamp$CraneSucked__input) := Main$Stamp$0$Stamp$CraneSucked__input;
    next(Main$Stamp$0$Stamp$CraneUp__input) := Main$Stamp$0$Stamp$CraneUp__input;
    next(Main$Stamp$0$Stamp$SFCReset__input) := Main$Stamp$0$Stamp$SFCReset__input;
    next(Main$Stamp$0$Stamp$StampLowered__input) := Main$Stamp$0$Stamp$StampLowered__input;
    next(Main$Stamp$0$Stamp$StampSliderFilled__input) := Main$Stamp$0$Stamp$StampSliderFilled__input;
    next(Main$Stamp$0$Stamp$StampSliderSensorMovedIn__input) := Main$Stamp$0$Stamp$StampSliderSensorMovedIn__input;
    next(Main$Stamp$0$Stamp$StampSliderSensorMovedOut__input) := Main$Stamp$0$Stamp$StampSliderSensorMovedOut__input;
    next(Main$Stamp$0$Stamp$StampStartButton__input) := Main$Stamp$0$Stamp$StampStartButton__input;
    next(Main$Stamp$0$Stamp$StampUp__input) := Main$Stamp$0$Stamp$StampUp__input;
    next(Main$Stamp$0$Stamp$StartVar__input) := Main$Stamp$0$Stamp$StartVar__input;
    next(Main$Stamp$Timer$0$Stamp$Timer$IN__input) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : Main$Stamp$Timer$0$Stamp$Timer$IN__input; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampLowered; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : Main$Stamp$Timer$0$Stamp$Timer$IN__input; 
        esac; 
        TRUE : Main$Stamp$Timer$0$Stamp$Timer$IN__input; 
    esac;
    next(Main$Stamp$Timer$0$Stamp$Timer$PT__input) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : Main$Stamp$Timer$0$Stamp$Timer$PT__input; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : 0ud16_0; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : Main$Stamp$Timer$0$Stamp$Timer$PT__input; 
        esac; 
        TRUE : Main$Stamp$Timer$0$Stamp$Timer$PT__input; 
    esac;
    next(Main$Stamp$Timer$1$Stamp$Timer$IN__input) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : Main$Stamp$Timer$1$Stamp$Timer$IN__input; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : Main$Stamp$Timer$1$Stamp$Timer$IN__input; 
        esac; 
        TRUE : Main$Stamp$Timer$1$Stamp$Timer$IN__input; 
    esac;
    next(Main$Stamp$Timer$1$Stamp$Timer$PT__input) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : Main$Stamp$Timer$1$Stamp$Timer$PT__input; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : 0ud16_0; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : Main$Stamp$Timer$1$Stamp$Timer$PT__input; 
        esac; 
        TRUE : Main$Stamp$Timer$1$Stamp$Timer$PT__input; 
    esac;
    next(Main$Stamp$Timer_ccnt) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : 0ud8_0; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : 0ud8_0 + 0ud8_1; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : 0ud8_0; 
        esac; 
        TRUE : 0ud8_0; 
    esac;
    next(Main$Stamp_ccnt) := 0ud8_0;
    next(Pusher$Duration2) := Pusher$Duration2;
    next(Pusher$Duration3) := Pusher$Duration3;
    next(Pusher$Duration_Slide1_Black) := Pusher$Duration_Slide1_Black;
    next(Pusher$Duration_Slide1_Metal) := Pusher$Duration_Slide1_Metal;
    next(Pusher$Duration_Slide1_White) := Pusher$Duration_Slide1_White;
    next(Pusher$Duration_Slide2_Black) := Pusher$Duration_Slide2_Black;
    next(Pusher$Duration_Slide2_Metal) := Pusher$Duration_Slide2_Metal;
    next(Pusher$Duration_Slide2_White) := Pusher$Duration_Slide2_White;
    next(Pusher$Priority_Var_Black) := Pusher$Priority_Var_Black;
    next(Pusher$Priority_Var_Metal) := Pusher$Priority_Var_Metal;
    next(Pusher$Priority_Var_White) := Pusher$Priority_Var_White;
    next(Pusher$PusherY1) := Pusher$PusherY1;
    next(Pusher$PusherY2) := Pusher$PusherY2;
    next(Pusher$SFCInit) := Pusher$SFCInit;
    next(Pusher$SFCPause) := Pusher$SFCPause;
    next(Pusher$SFCReset) := Pusher$SFCReset;
    next(Pusher$Slide1_black) := Pusher$Slide1_black;
    next(Pusher$Slide1_metal) := Pusher$Slide1_metal;
    next(Pusher$Slide1_white) := Pusher$Slide1_white;
    next(Pusher$Slide2_black) := Pusher$Slide2_black;
    next(Pusher$Slide2_metal) := Pusher$Slide2_metal;
    next(Pusher$Slide2_white) := Pusher$Slide2_white;
    next(Pusher$Slide3_black) := Pusher$Slide3_black;
    next(Pusher$Slide3_metal) := Pusher$Slide3_metal;
    next(Pusher$Slide3_white) := Pusher$Slide3_white;
    next(Pusher$SorterCapacitiveSensorPusher1) := Pusher$SorterCapacitiveSensorPusher1;
    next(Pusher$SorterCapacitiveSensorPusher2) := Pusher$SorterCapacitiveSensorPusher2;
    next(Pusher$SorterLightbarrierCraneInterface) := Pusher$SorterLightbarrierCraneInterface;
    next(Pusher$SorterLightnessSensorPusher1) := Pusher$SorterLightnessSensorPusher1;
    next(Pusher$SorterLightnessSensorPusher2) := Pusher$SorterLightnessSensorPusher2;
    next(Pusher$SorterLightnessSensorPusher3) := Pusher$SorterLightnessSensorPusher3;
    next(Pusher$SorterLightnesssensorCraneInterfaceInverse) := Pusher$SorterLightnesssensorCraneInterfaceInverse;
    next(Pusher$SorterPusher1MovedIn) := Pusher$SorterPusher1MovedIn;
    next(Pusher$SorterPusher1MovedOut) := Pusher$SorterPusher1MovedOut;
    next(Pusher$SorterPusher2MovedIn) := Pusher$SorterPusher2MovedIn;
    next(Pusher$SorterPusher2MovedOut) := Pusher$SorterPusher2MovedOut;
    next(Pusher$SorterStartButton) := Pusher$SorterStartButton;
    next(Pusher$StartVar) := Pusher$StartVar;
    next(Pusher$Timer2$ET) := Pusher$Timer2$ET;
    next(Pusher$Timer2$IN) := Pusher$Timer2$IN;
    next(Pusher$Timer2$PT) := Pusher$Timer2$PT;
    next(Pusher$Timer2$Q) := Pusher$Timer2$Q;
    next(Pusher$Timer3$ET) := Pusher$Timer3$ET;
    next(Pusher$Timer3$IN) := Pusher$Timer3$IN;
    next(Pusher$Timer3$PT) := Pusher$Timer3$PT;
    next(Pusher$Timer3$Q) := Pusher$Timer3$Q;
    next(Pusher$Timer_Slide1_Black$ET) := Pusher$Timer_Slide1_Black$ET;
    next(Pusher$Timer_Slide1_Black$IN) := Pusher$Timer_Slide1_Black$IN;
    next(Pusher$Timer_Slide1_Black$PT) := Pusher$Timer_Slide1_Black$PT;
    next(Pusher$Timer_Slide1_Black$Q) := Pusher$Timer_Slide1_Black$Q;
    next(Pusher$Timer_Slide1_Metal$ET) := Pusher$Timer_Slide1_Metal$ET;
    next(Pusher$Timer_Slide1_Metal$IN) := Pusher$Timer_Slide1_Metal$IN;
    next(Pusher$Timer_Slide1_Metal$PT) := Pusher$Timer_Slide1_Metal$PT;
    next(Pusher$Timer_Slide1_Metal$Q) := Pusher$Timer_Slide1_Metal$Q;
    next(Pusher$Timer_Slide1_White$ET) := Pusher$Timer_Slide1_White$ET;
    next(Pusher$Timer_Slide1_White$IN) := Pusher$Timer_Slide1_White$IN;
    next(Pusher$Timer_Slide1_White$PT) := Pusher$Timer_Slide1_White$PT;
    next(Pusher$Timer_Slide1_White$Q) := Pusher$Timer_Slide1_White$Q;
    next(Pusher$Timer_Slide2_Black$ET) := Pusher$Timer_Slide2_Black$ET;
    next(Pusher$Timer_Slide2_Black$IN) := Pusher$Timer_Slide2_Black$IN;
    next(Pusher$Timer_Slide2_Black$PT) := Pusher$Timer_Slide2_Black$PT;
    next(Pusher$Timer_Slide2_Black$Q) := Pusher$Timer_Slide2_Black$Q;
    next(Pusher$Timer_Slide2_Metal$ET) := Pusher$Timer_Slide2_Metal$ET;
    next(Pusher$Timer_Slide2_Metal$IN) := Pusher$Timer_Slide2_Metal$IN;
    next(Pusher$Timer_Slide2_Metal$PT) := Pusher$Timer_Slide2_Metal$PT;
    next(Pusher$Timer_Slide2_Metal$Q) := Pusher$Timer_Slide2_Metal$Q;
    next(Pusher$Timer_Slide2_White$ET) := Pusher$Timer_Slide2_White$ET;
    next(Pusher$Timer_Slide2_White$IN) := Pusher$Timer_Slide2_White$IN;
    next(Pusher$Timer_Slide2_White$PT) := Pusher$Timer_Slide2_White$PT;
    next(Pusher$Timer_Slide2_White$Q) := Pusher$Timer_Slide2_White$Q;
    next(Pusher$__transit) := Pusher$__transit;
    next(Pusher$_state) := Pusher$_state;
    next(Pusher$interconnect2) := Pusher$interconnect2;
    next(Pusher$interconnect3) := Pusher$interconnect3;
    next(Pusher$interconnect_Slide1_Black) := Pusher$interconnect_Slide1_Black;
    next(Pusher$interconnect_Slide1_Metal) := Pusher$interconnect_Slide1_Metal;
    next(Pusher$interconnect_Slide1_White) := Pusher$interconnect_Slide1_White;
    next(Pusher$interconnect_Slide2_Black) := Pusher$interconnect_Slide2_Black;
    next(Pusher$interconnect_Slide2_Metal) := Pusher$interconnect_Slide2_Metal;
    next(Pusher$interconnect_Slide2_White) := Pusher$interconnect_Slide2_White;
    next(Stamp$CraneDown) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$CraneDown; 
    esac;
    next(Stamp$CraneOnConveyor) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$CraneOnConveyor; 
    esac;
    next(Stamp$CranePositionStamp) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$CranePositionStamp; 
    esac;
    next(Stamp$CraneSucked) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$CraneSucked; 
    esac;
    next(Stamp$CraneUp) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$CraneUp; 
    esac;
    next(Stamp$Duration) := case
        Stamp$SFCInit | Stamp$SFCReset : 0ud16_125; 
        TRUE : Stamp$Duration; 
    esac;
    next(Stamp$SFCInit) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$SFCInit; 
    esac;
    next(Stamp$SFCPause) := Stamp$SFCPause;
    next(Stamp$SFCReset) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$SFCReset; 
    esac;
    next(Stamp$StampGreenLamp) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampGreenLamp; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampGreenLamp; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$StampGreenLamp; 
        esac; 
    esac;
    next(Stamp$StampLowered) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StampLowered; 
    esac;
    next(Stamp$StampPressure) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampPressure; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampPressure; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$StampPressure; 
        esac; 
    esac;
    next(Stamp$StampPusher) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampPusher; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampPusher; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampPusher; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampPusher; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampPusher; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$StampPusher; 
        esac; 
    esac;
    next(Stamp$StampSliderFilled) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StampSliderFilled; 
    esac;
    next(Stamp$StampSliderMovedIn) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedIn; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedIn; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedIn; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedIn; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$StampSliderMovedIn; 
        esac; 
    esac;
    next(Stamp$StampSliderMovedOut) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedOut; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedOut; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedOut; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedOut; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedOut; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$StampSliderMovedOut; 
        esac; 
    esac;
    next(Stamp$StampSliderSensorMovedIn) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StampSliderSensorMovedIn; 
    esac;
    next(Stamp$StampSliderSensorMovedOut) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StampSliderSensorMovedOut; 
    esac;
    next(Stamp$StampStartButton) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StampStartButton; 
    esac;
    next(Stamp$StampUp) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StampUp; 
    esac;
    next(Stamp$StampWhiteLamp) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StampWhiteLamp; 
    esac;
    next(Stamp$StartCommandStamp) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StartCommandStamp; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StartCommandStamp; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StartCommandStamp; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$StartCommandStamp; 
        esac; 
    esac;
    next(Stamp$StartVar) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StartVar; 
    esac;
    next(Stamp$Timer$ET) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : case
                Stamp$SFCInit | Stamp$SFCReset : 0ud16_0; 
                TRUE : Stamp$Timer$ET; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : Main$Stamp$Timer$0$Stamp$Timer$ET__random; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : Main$Stamp$Timer$1$Stamp$Timer$ET__random; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : 0ud16_0; 
                TRUE : Stamp$Timer$ET; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : 0ud16_0; 
            TRUE : Stamp$Timer$ET; 
        esac; 
    esac;
    next(Stamp$Timer$IN) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$Timer$IN; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampLowered; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$Timer$IN; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$Timer$IN; 
        esac; 
    esac;
    next(Stamp$Timer$PT) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : case
                Stamp$SFCInit | Stamp$SFCReset : 0ud16_0; 
                TRUE : Stamp$Timer$PT; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : 0ud16_0; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : 0ud16_0; 
                TRUE : Stamp$Timer$PT; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : 0ud16_0; 
            TRUE : Stamp$Timer$PT; 
        esac; 
    esac;
    next(Stamp$Timer$Q) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$Timer$Q; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : Main$Stamp$Timer$0$Stamp$Timer$Q__random; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : Main$Stamp$Timer$1$Stamp$Timer$Q__random; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$Timer$Q; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$Timer$Q; 
        esac; 
    esac;
    next(Stamp$__transit) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                TRUE : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : case
                case
                    (case
                        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                        TRUE : Stamp$StampStartButton; 
                    esac) = TRUE : TRUE; 
                    TRUE : case
                        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                        TRUE : Stamp$interconnectStampStartCommand; 
                    esac; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP : case
                TRUE : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderSensorMovedIn; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderSensorMovedOut; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampLowered; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampUp; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StartVar; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderFilled; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$CraneUp; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderSensorMovedIn; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampLowered; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : case
                Main$Stamp$Timer$0$Stamp$Timer$Q__random : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : case
                TRUE : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                (case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$CraneOnConveyor; 
                esac) & !case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderFilled; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$__transit; 
        esac; 
    esac;
    next(Stamp$_state) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                TRUE : START_STAMP; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : case
                case
                    (case
                        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                        TRUE : Stamp$StampStartButton; 
                    esac) = TRUE : TRUE; 
                    TRUE : case
                        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                        TRUE : Stamp$interconnectStampStartCommand; 
                    esac; 
                esac : GREEN_LAMP; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP : case
                TRUE : STAMP_INIT_1; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderSensorMovedIn; 
                esac : STAMP_INIT_2; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderSensorMovedOut; 
                esac : STAMP_INIT_3; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampLowered; 
                esac : STAMP_INIT_4; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampUp; 
                esac : INTERSTEP; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StartVar; 
                esac : INTERTSEP_2; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderFilled; 
                esac : STEP0; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$CraneUp; 
                esac : STAMPSLIDERBACK; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderSensorMovedIn; 
                esac : STAMPPROCESS; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampLowered; 
                esac : STEP1; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : case
                Main$Stamp$Timer$0$Stamp$Timer$Q__random : STAMPSLIDERFORWARD; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : case
                TRUE : STEP2; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                (case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$CraneOnConveyor; 
                esac) & !case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderFilled; 
                esac : INTERSTEP; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
            TRUE : Stamp$_state; 
        esac; 
    esac;
    next(Stamp$interconnect) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$interconnect; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : Main$Stamp$Timer$0$Stamp$Timer$Q__random; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : case
                (case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampLowered; 
                esac) = FALSE & (case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampUp; 
                esac) = TRUE : FALSE; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$interconnect; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$interconnect; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$interconnect; 
        esac; 
    esac;
    next(Stamp$interconnectStampStartCommand) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$interconnectStampStartCommand; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : case
                (case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampStartButton; 
                esac) = TRUE : TRUE; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$interconnectStampStartCommand; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$interconnectStampStartCommand; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$interconnectStampStartCommand; 
        esac; 
    esac;
-- end of module Main$Stamp_abstractedold
MODULE Main$Stamp_abstractednew(Main$Conveyor$0$Conveyor$SorterConveyorTowardsCrane__random, Main$Conveyor$0$Conveyor$SorterConveyorTowardsStacker__random, Main$Conveyor$0$Conveyor$SorterGreenLampConveyor__random, Main$Conveyor$0$Conveyor$SorterWhiteLampConveyor__random, Main$Conveyor$0$Conveyor$StartCommandConveyor__random, Main$Crane$0$Crane$AnalogCranePressure__random, Main$Crane$0$Crane$CraneLower__random, Main$Crane$0$Crane$CraneTurnClockwise__random, Main$Crane$0$Crane$CraneTurnCounterclockwise__random, Main$Crane$0$Crane$MagazinSlider__random, Main$Crane$0$Crane$MagazinVacuumOff__random, Main$Crane$0$Crane$MagazinVacuumOn__random, Main$Crane$0$Crane$StartCommandCrane__random, Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$ET__random, Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$Q__random, Main$Crane$Timer1$0$Crane$Timer1$ET__random, Main$Crane$Timer1$0$Crane$Timer1$Q__random, Main$Crane$Timer1$1$Crane$Timer1$ET__random, Main$Crane$Timer1$1$Crane$Timer1$Q__random, Main$Mag$0$Mag$CraneLower__random, Main$Mag$0$Mag$CraneTurnClockwise__random, Main$Mag$0$Mag$CraneTurnCounterclockwise__random, Main$Mag$0$Mag$MagazinGreenLamp__random, Main$Mag$0$Mag$MagazinSlider__random, Main$Mag$0$Mag$MagazinVacuumOff__random, Main$Mag$0$Mag$MagazinVacuumOn__random, Main$Mag$0$Mag$MagazinWhiteLamp__random, Main$Mag$0$Mag$StartCommandMagazin__random, Main$Pusher$0$Pusher$PusherY1__random, Main$Pusher$0$Pusher$PusherY2__random, Main$Stamp$0$Stamp$StampGreenLamp__random, Main$Stamp$0$Stamp$StampPressure__random, Main$Stamp$0$Stamp$StampPusher__random, Main$Stamp$0$Stamp$StampSliderMovedIn__random, Main$Stamp$0$Stamp$StampSliderMovedOut__random, Main$Stamp$0$Stamp$StampWhiteLamp__random, Main$Stamp$0$Stamp$StartCommandStamp__random, Main$Stamp$Timer$0$Stamp$Timer$ET__random, Main$Stamp$Timer$0$Stamp$Timer$Q__random, Main$Stamp$Timer$1$Stamp$Timer$ET__random, Main$Stamp$Timer$1$Stamp$Timer$Q__random, Sensor_AnalogCranePosition, Sensor_CraneDown, Sensor_CraneOnConveyor, Sensor_CraneOnMagazin, Sensor_CranePosition, Sensor_CranePositionStamp, Sensor_CraneSucked, Sensor_CraneUp, Sensor_MagazinCapacitiveSensor, Sensor_MagazinEmergencyStop, Sensor_MagazinOpticalSensor, Sensor_MagazinSwitchManuellAutomatic, Sensor_SliderMovedOut, Sensor_SliderNotMovedOut, Sensor_SorterCapacitiveSensorPusher1, Sensor_SorterCapacitiveSensorPusher2, Sensor_SorterEmergencyStop, Sensor_SorterLightbarrierCraneInterface, Sensor_SorterLightnessSensorPusher1, Sensor_SorterLightnessSensorPusher2, Sensor_SorterLightnessSensorPusher3, Sensor_SorterLightnesssensorCraneInterfaceInverse, Sensor_SorterPusher1MovedIn, Sensor_SorterPusher1MovedOut, Sensor_SorterPusher2MovedIn, Sensor_SorterPusher2MovedOut, Sensor_SorterStartButton, Sensor_SorterSwitchManuellAutomatic, Sensor_StampEmergencyStop, Sensor_StampLowered, Sensor_StampSliderFilled, Sensor_StampSliderSensorMovedIn, Sensor_StampSliderSensorMovedOut, Sensor_StampStartButton, Sensor_StampSwitchManuellAutomatic, Sensor_StampUp, Sensor_StartButtonMagazin, Sensor_WorkpieceReady)
VAR
    Actuator_AnalogCranePressure : signed word[16];
    Actuator_CraneLower : boolean;
    Actuator_CraneTurnClockwise : boolean;
    Actuator_CraneTurnCounterclockwise : boolean;
    Actuator_MagazinGreenLamp : boolean;
    Actuator_MagazinSlider : boolean;
    Actuator_MagazinVacuumOff : boolean;
    Actuator_MagazinVacuumOn : boolean;
    Actuator_MagazinWhiteLamp : boolean;
    Actuator_PusherY1 : boolean;
    Actuator_PusherY2 : boolean;
    Actuator_SorterConveyorTowardsCrane : boolean;
    Actuator_SorterConveyorTowardsStacker : boolean;
    Actuator_SorterGreenLampConveyor : boolean;
    Actuator_SorterWhiteLampConveyor : boolean;
    Actuator_StampGreenLamp : boolean;
    Actuator_StampPusher : boolean;
    Actuator_StampSliderMovedIn : boolean;
    Actuator_StampSliderMovedOut : boolean;
    Actuator_StampWhiteLamp : boolean;
    Conveyor$Duration_Conveyor_Runtime : unsigned word[16];
    Conveyor$Duration_Conveyor_Test : unsigned word[16];
    Conveyor$SFCInit : boolean;
    Conveyor$SFCPause : boolean;
    Conveyor$SFCReset : boolean;
    Conveyor$SorterConveyorTowardsCrane : boolean;
    Conveyor$SorterConveyorTowardsStacker : boolean;
    Conveyor$SorterGreenLampConveyor : boolean;
    Conveyor$SorterLightbarrierCraneInterface : boolean;
    Conveyor$SorterStartButton : boolean;
    Conveyor$SorterSwitchManuellAutomatic : boolean;
    Conveyor$SorterWhiteLampConveyor : boolean;
    Conveyor$StartCommandConveyor : boolean;
    Conveyor$StartVar : boolean;
    Conveyor$Timer_Conveyor_Runtime$ET : unsigned word[16];
    Conveyor$Timer_Conveyor_Runtime$IN : boolean;
    Conveyor$Timer_Conveyor_Runtime$PT : unsigned word[16];
    Conveyor$Timer_Conveyor_Runtime$Q : boolean;
    Conveyor$Timer_Conveyor_Test$ET : unsigned word[16];
    Conveyor$Timer_Conveyor_Test$IN : boolean;
    Conveyor$Timer_Conveyor_Test$PT : unsigned word[16];
    Conveyor$Timer_Conveyor_Test$Q : boolean;
    Conveyor$__transit : boolean;
    Conveyor$_state : {"INIT", START_CONVEYOR, GREEN_LAMP, CONVEYOR_INIT, CONVEYOR_INIT_2, INTERSTEP, STEP0, CONVEYOR_TOWARDS_STACKER, RUNTIME_CONVEYOR, CONVEYOR_PAUSE, CONVEYOR_STOP_EMPTY_MAGAZIN};
    Conveyor$interconnectConveyorStartCommand : boolean;
    Conveyor$interconnectConveyorTerminationCommand : boolean;
    Conveyor$interconnect_Conveyor_Runtime : boolean;
    Conveyor$interconnect_Conveyor_Test : boolean;
    Crane$AnalogCranePosition : signed word[16];
    Crane$AnalogCranePressure : signed word[16];
    Crane$CraneDown : boolean;
    Crane$CraneLower : boolean;
    Crane$CraneSucked : boolean;
    Crane$CraneTurnClockwise : boolean;
    Crane$CraneTurnCounterclockwise : boolean;
    Crane$CraneUp : boolean;
    Crane$Duration1 : unsigned word[16];
    Crane$MagazinCapacitiveSensor : boolean;
    Crane$MagazinOpticalSensor : boolean;
    Crane$MagazinSlider : boolean;
    Crane$MagazinVacuumOff : boolean;
    Crane$MagazinVacuumOn : boolean;
    Crane$SFCInit : boolean;
    Crane$SFCPause : boolean;
    Crane$SFCReset : boolean;
    Crane$SliderMovedOut : boolean;
    Crane$SliderNotMovedOut : boolean;
    Crane$StampLowered : boolean;
    Crane$StampSliderFilled : boolean;
    Crane$StampSliderSensorMovedOut : boolean;
    Crane$StartButtonMagazin : boolean;
    Crane$StartCommandCrane : boolean;
    Crane$StartVar : boolean;
    Crane$TimeDelay_Timer$ET : unsigned word[16];
    Crane$TimeDelay_Timer$IN : boolean;
    Crane$TimeDelay_Timer$PT : unsigned word[16];
    Crane$TimeDelay_Timer$Q : boolean;
    Crane$TimeDelay_Timer_Duration : unsigned word[16];
    Crane$TimeDelay_Timer_interconnect : boolean;
    Crane$Timer1$ET : unsigned word[16];
    Crane$Timer1$IN : boolean;
    Crane$Timer1$PT : unsigned word[16];
    Crane$Timer1$Q : boolean;
    Crane$WorkpieceReady : boolean;
    Crane$__transit : boolean;
    Crane$_state : {"INIT", START_CRANE, CRANE_INIT, CRANE_INIT_2, INTERSTEP, INTERSTEP_2, TIMEDELAY, INTERSTEP_3, TURN_RIGHT, MAGAZIN_STOP, CRANE_LOWER, STEP0, CRANE_LIFT_MAGAZIN, CRANE_TURN_LEFT_NOT_METALLIC, CRANE_ON_CONVEYOR, STAMP_PRESSURE_PROFILE_SET_METALLIC, CRANE_LIFT_MAGAZIN_METALLIC, CRANE_TURN_LEFT_METALLIC, CRANE_ON_STAMP_METALLIC, RELEASE_WORKPIECE, CRANE_GO_UP, STAMP_PRESSURE_PROFILE_SET_WHITE, CRANE_LIFT_MAGAZIN_WHITE, CRANE_TURN_LEFT_WHITE, CRANE_ON_STAMP_WHITE, RELEASE_WORKPIECE_WHITE, CRANE_GO_UP_WHITE, STEP3, STEP2, PAUSE, TURN_RIGHT_BLACK, MAGAZIN_STOP_BLACK, CRANE_LIFT_NOT_METALLIC_BLACK, CRANE_TURN_LEFT_NOT_METALLIC_BLACK, CRANE_ON_CONVEYOR_NOT_METALLICA_BLACK, RELEASE_BLACK, CRANE_LIFT_CONVEYOR_BLACK, CRANE_TURN_LEFT_BACK_TO_STAMP, CRANE_ON_STAMP_STOP_BLACK, STEP4, RESET_INTERCONNECT, LOWER_CRANE, SUCK_AT_STAMP, CRANE_LIFT_AT_STAMP, CRANE_TURN_LEFT_FROM_STAMP, CRANE_ON_CONVEYOR_METALLIC, RELEASE, CRANE_LIFT_CONVEYOR, NO_WORKPIECE_READY, CRANE_TURN_LEFT_METALLIC2, CRANE_ON_STAMP_METALLIC2, INTERSTEP_4, CRANE_ON_STAMP_METALLIC2_LOWER, SUCK_AT_STAMP2, CRANE_LIFT_AT_STAMP2, CRANE_TURN_RIGHT_FROM_STAMP, CRANE_ON_CONVEYOR_METALLIC2, RELEASE2, CRANE_LIFT_CONVEYOR2, TURN_RIGHT_FINAL, MAGAZIN_STOP_FINAL};
    Crane$actualtime1 : unsigned word[16];
    Crane$interconnect : boolean;
    Crane$interconnectCraneStartCommand : boolean;
    Mag$AnalogCranePosition : signed word[16];
    Mag$CraneDown : boolean;
    Mag$CraneLower : boolean;
    Mag$CraneOnConveyor : boolean;
    Mag$CraneOnMagazin : boolean;
    Mag$CraneSucked : boolean;
    Mag$CraneTurnClockwise : boolean;
    Mag$CraneTurnCounterclockwise : boolean;
    Mag$CraneUp : boolean;
    Mag$MagazinGreenLamp : boolean;
    Mag$MagazinSlider : boolean;
    Mag$MagazinVacuumOff : boolean;
    Mag$MagazinVacuumOn : boolean;
    Mag$MagazinWhiteLamp : boolean;
    Mag$SFCInit : boolean;
    Mag$SFCPause : boolean;
    Mag$SFCReset : boolean;
    Mag$SliderMovedOut : boolean;
    Mag$SliderNotMovedOut : boolean;
    Mag$StartButtonMagazin : boolean;
    Mag$StartCommandMagazin : boolean;
    Mag$StartVar : boolean;
    Mag$WorkpieceReady : boolean;
    Mag$__transit : boolean;
    Mag$_state : {"INIT", START_MAGAZIN, GREEN_LAMP, MAGAZIN_INIT, MAGAZIN_INIT_2, INTERSTEP, CONVEY, STEP0, SLIDER_MOVE_BACK, STEP1};
    Mag$interconnectMagazinStartCommand : boolean;
    Main$Conveyor$0$Conveyor$SFCReset__input : boolean;
    Main$Conveyor$0$Conveyor$SorterLightbarrierCraneInterface__input : boolean;
    Main$Conveyor$0$Conveyor$SorterStartButton__input : boolean;
    Main$Conveyor$0$Conveyor$SorterSwitchManuellAutomatic__input : boolean;
    Main$Conveyor$0$Conveyor$StartVar__input : boolean;
    Main$Conveyor$Timer_Conveyor_Runtime_ccnt : unsigned word[8];
    Main$Conveyor$Timer_Conveyor_Test_ccnt : unsigned word[8];
    Main$Conveyor_ccnt : unsigned word[8];
    Main$Crane$0$Crane$AnalogCranePosition__input : signed word[16];
    Main$Crane$0$Crane$CraneDown__input : boolean;
    Main$Crane$0$Crane$CraneSucked__input : boolean;
    Main$Crane$0$Crane$CraneUp__input : boolean;
    Main$Crane$0$Crane$MagazinCapacitiveSensor__input : boolean;
    Main$Crane$0$Crane$MagazinOpticalSensor__input : boolean;
    Main$Crane$0$Crane$SFCReset__input : boolean;
    Main$Crane$0$Crane$SliderMovedOut__input : boolean;
    Main$Crane$0$Crane$SliderNotMovedOut__input : boolean;
    Main$Crane$0$Crane$StampLowered__input : boolean;
    Main$Crane$0$Crane$StampSliderFilled__input : boolean;
    Main$Crane$0$Crane$StampSliderSensorMovedOut__input : boolean;
    Main$Crane$0$Crane$StartButtonMagazin__input : boolean;
    Main$Crane$0$Crane$StartVar__input : boolean;
    Main$Crane$0$Crane$WorkpieceReady__input : boolean;
    Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$IN__input : boolean;
    Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$PT__input : unsigned word[16];
    Main$Crane$TimeDelay_Timer_ccnt : unsigned word[8];
    Main$Crane$Timer1$0$Crane$Timer1$IN__input : boolean;
    Main$Crane$Timer1$0$Crane$Timer1$PT__input : unsigned word[16];
    Main$Crane$Timer1$1$Crane$Timer1$IN__input : boolean;
    Main$Crane$Timer1$1$Crane$Timer1$PT__input : unsigned word[16];
    Main$Crane$Timer1_ccnt : unsigned word[8];
    Main$Crane_ccnt : unsigned word[8];
    Main$Mag$0$Mag$AnalogCranePosition__input : signed word[16];
    Main$Mag$0$Mag$CraneDown__input : boolean;
    Main$Mag$0$Mag$CraneOnConveyor__input : boolean;
    Main$Mag$0$Mag$CraneOnMagazin__input : boolean;
    Main$Mag$0$Mag$CraneSucked__input : boolean;
    Main$Mag$0$Mag$CraneUp__input : boolean;
    Main$Mag$0$Mag$SFCReset__input : boolean;
    Main$Mag$0$Mag$SliderMovedOut__input : boolean;
    Main$Mag$0$Mag$SliderNotMovedOut__input : boolean;
    Main$Mag$0$Mag$StartButtonMagazin__input : boolean;
    Main$Mag$0$Mag$StartVar__input : boolean;
    Main$Mag$0$Mag$WorkpieceReady__input : boolean;
    Main$Mag_ccnt : unsigned word[8];
    Main$Pusher$0$Pusher$SFCReset__input : boolean;
    Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher1__input : boolean;
    Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher2__input : boolean;
    Main$Pusher$0$Pusher$SorterLightbarrierCraneInterface__input : boolean;
    Main$Pusher$0$Pusher$SorterLightnessSensorPusher1__input : boolean;
    Main$Pusher$0$Pusher$SorterLightnessSensorPusher2__input : boolean;
    Main$Pusher$0$Pusher$SorterLightnessSensorPusher3__input : boolean;
    Main$Pusher$0$Pusher$SorterLightnesssensorCraneInterfaceInverse__input : boolean;
    Main$Pusher$0$Pusher$SorterPusher1MovedIn__input : boolean;
    Main$Pusher$0$Pusher$SorterPusher1MovedOut__input : boolean;
    Main$Pusher$0$Pusher$SorterPusher2MovedIn__input : boolean;
    Main$Pusher$0$Pusher$SorterPusher2MovedOut__input : boolean;
    Main$Pusher$0$Pusher$SorterStartButton__input : boolean;
    Main$Pusher$0$Pusher$StartVar__input : boolean;
    Main$Pusher$Timer2_ccnt : unsigned word[8];
    Main$Pusher$Timer3_ccnt : unsigned word[8];
    Main$Pusher$Timer_Slide1_Black_ccnt : unsigned word[8];
    Main$Pusher$Timer_Slide1_Metal_ccnt : unsigned word[8];
    Main$Pusher$Timer_Slide1_White_ccnt : unsigned word[8];
    Main$Pusher$Timer_Slide2_Black_ccnt : unsigned word[8];
    Main$Pusher$Timer_Slide2_Metal_ccnt : unsigned word[8];
    Main$Pusher$Timer_Slide2_White_ccnt : unsigned word[8];
    Main$Pusher_ccnt : unsigned word[8];
    Main$Stamp$0$Stamp$AnalogCranePosition__input : signed word[16];
    Main$Stamp$0$Stamp$CraneDown__input : boolean;
    Main$Stamp$0$Stamp$CraneOnConveyor__input : boolean;
    Main$Stamp$0$Stamp$CranePositionStamp__input : boolean;
    Main$Stamp$0$Stamp$CraneSucked__input : boolean;
    Main$Stamp$0$Stamp$CraneUp__input : boolean;
    Main$Stamp$0$Stamp$SFCReset__input : boolean;
    Main$Stamp$0$Stamp$StampLowered__input : boolean;
    Main$Stamp$0$Stamp$StampSliderFilled__input : boolean;
    Main$Stamp$0$Stamp$StampSliderSensorMovedIn__input : boolean;
    Main$Stamp$0$Stamp$StampSliderSensorMovedOut__input : boolean;
    Main$Stamp$0$Stamp$StampStartButton__input : boolean;
    Main$Stamp$0$Stamp$StampUp__input : boolean;
    Main$Stamp$0$Stamp$StartVar__input : boolean;
    Main$Stamp$Timer$0$Stamp$Timer$IN__input : boolean;
    Main$Stamp$Timer$0$Stamp$Timer$PT__input : unsigned word[16];
    Main$Stamp$Timer$1$Stamp$Timer$IN__input : boolean;
    Main$Stamp$Timer$1$Stamp$Timer$PT__input : unsigned word[16];
    Main$Stamp$Timer_ccnt : unsigned word[8];
    Main$Stamp_ccnt : unsigned word[8];
    Pusher$Duration2 : unsigned word[16];
    Pusher$Duration3 : unsigned word[16];
    Pusher$Duration_Slide1_Black : unsigned word[16];
    Pusher$Duration_Slide1_Metal : unsigned word[16];
    Pusher$Duration_Slide1_White : unsigned word[16];
    Pusher$Duration_Slide2_Black : unsigned word[16];
    Pusher$Duration_Slide2_Metal : unsigned word[16];
    Pusher$Duration_Slide2_White : unsigned word[16];
    Pusher$Priority_Var_Black : signed word[16];
    Pusher$Priority_Var_Metal : signed word[16];
    Pusher$Priority_Var_White : signed word[16];
    Pusher$PusherY1 : boolean;
    Pusher$PusherY2 : boolean;
    Pusher$SFCInit : boolean;
    Pusher$SFCPause : boolean;
    Pusher$SFCReset : boolean;
    Pusher$Slide1_black : signed word[16];
    Pusher$Slide1_metal : signed word[16];
    Pusher$Slide1_white : signed word[16];
    Pusher$Slide2_black : signed word[16];
    Pusher$Slide2_metal : signed word[16];
    Pusher$Slide2_white : signed word[16];
    Pusher$Slide3_black : signed word[16];
    Pusher$Slide3_metal : signed word[16];
    Pusher$Slide3_white : signed word[16];
    Pusher$SorterCapacitiveSensorPusher1 : boolean;
    Pusher$SorterCapacitiveSensorPusher2 : boolean;
    Pusher$SorterLightbarrierCraneInterface : boolean;
    Pusher$SorterLightnessSensorPusher1 : boolean;
    Pusher$SorterLightnessSensorPusher2 : boolean;
    Pusher$SorterLightnessSensorPusher3 : boolean;
    Pusher$SorterLightnesssensorCraneInterfaceInverse : boolean;
    Pusher$SorterPusher1MovedIn : boolean;
    Pusher$SorterPusher1MovedOut : boolean;
    Pusher$SorterPusher2MovedIn : boolean;
    Pusher$SorterPusher2MovedOut : boolean;
    Pusher$SorterStartButton : boolean;
    Pusher$StartVar : boolean;
    Pusher$Timer2$ET : unsigned word[16];
    Pusher$Timer2$IN : boolean;
    Pusher$Timer2$PT : unsigned word[16];
    Pusher$Timer2$Q : boolean;
    Pusher$Timer3$ET : unsigned word[16];
    Pusher$Timer3$IN : boolean;
    Pusher$Timer3$PT : unsigned word[16];
    Pusher$Timer3$Q : boolean;
    Pusher$Timer_Slide1_Black$ET : unsigned word[16];
    Pusher$Timer_Slide1_Black$IN : boolean;
    Pusher$Timer_Slide1_Black$PT : unsigned word[16];
    Pusher$Timer_Slide1_Black$Q : boolean;
    Pusher$Timer_Slide1_Metal$ET : unsigned word[16];
    Pusher$Timer_Slide1_Metal$IN : boolean;
    Pusher$Timer_Slide1_Metal$PT : unsigned word[16];
    Pusher$Timer_Slide1_Metal$Q : boolean;
    Pusher$Timer_Slide1_White$ET : unsigned word[16];
    Pusher$Timer_Slide1_White$IN : boolean;
    Pusher$Timer_Slide1_White$PT : unsigned word[16];
    Pusher$Timer_Slide1_White$Q : boolean;
    Pusher$Timer_Slide2_Black$ET : unsigned word[16];
    Pusher$Timer_Slide2_Black$IN : boolean;
    Pusher$Timer_Slide2_Black$PT : unsigned word[16];
    Pusher$Timer_Slide2_Black$Q : boolean;
    Pusher$Timer_Slide2_Metal$ET : unsigned word[16];
    Pusher$Timer_Slide2_Metal$IN : boolean;
    Pusher$Timer_Slide2_Metal$PT : unsigned word[16];
    Pusher$Timer_Slide2_Metal$Q : boolean;
    Pusher$Timer_Slide2_White$ET : unsigned word[16];
    Pusher$Timer_Slide2_White$IN : boolean;
    Pusher$Timer_Slide2_White$PT : unsigned word[16];
    Pusher$Timer_Slide2_White$Q : boolean;
    Pusher$__transit : boolean;
    Pusher$_state : {"INIT", INTERSTEP, INTERSTEP_2, CHECK_FOR_BLACK, THIRD_SLIDE_BLACK_WORKPIECES, WAIT_BLACK, RESET_INTERCONNECT3, SECOND_SLIDE_BLACK_WORKPIECES, SECOND_SLIDE_TIMER_BLACK, PUSHERY2_MOVE_OUT_BLACK, WAIT_Y2_BLACK, PUSHERY2_MOVE_IN_BLACK, RESET_INTERCONNECT_SLIDE2_BLACK, FIRST_SLIDE_BLACK_WORKPIECES, FIRST_SLIDE_TIMER_BLACK, PUSHERY1_MOVE_OUT_BLACK, WAIT_Y1_BLACK, PUSHERY1_MOVE_IN_BLACK, RESET_INTERCONNECT_SLIDE1_BLACK, CHECK_FOR_WHITE, FIRST_SLIDE_WHITE_WORKPIECES, FIRST_SLIDE_TIMER_WHITE, PUSHERY1_MOVE_OUT_WHITE, WAIT_Y1_WHITE, PUSHERY1_MOVE_IN_WHITE, RESET_INTERCONNECT_SLIDE1_WHITE, SECOND_SLIDE_WHITE_WORKPIECES, SECOND_TEST_FOR_WHITE, SECOND_SLIDE_TIMER_WHITE, PUSHERY2_MOVE_OUT_WHITE, WAIT_Y2_WHITE, PUSHERY2_MOVE_IN_WHITE, RESET_INTERCONNECT_SLIDE2_WHITE, THIRD_SLIDE_WHITE_WORKPIECES, WAIT_WHITE, RESET_INTERCONNECT_SLIDE3_WHITE, CHECK_FOR_METAL, FIRST_SLIDE_METAL_WORKPIECES, FIRST_SLIDE_TIMER_METAL, PUSHERY1_MOVE_OUT_METAL, WAIT_Y1_METAL, PUSHERY1_MOVE_IN_METAL, RESET_INTERCONNECT_SLIDE1_METAL, SECOND_SLIDE_METAL_WORKPIECES, SECOND_TEST_FOR_METAL, SECOND_SLIDE_TIMER_METAL, PUSHERY2_MOVE_OUT_METAL, WAIT_Y2_METAL, PUSHERY2_MOVE_IN_METAL, RESET_INTERCONNECT_SLIDE2_METAL, THIRD_SLIDE_METAL_WORKPIECES, WAIT_METAL, RESET_INTERCONNECT_SLIDE3_METAL};
    Pusher$interconnect2 : boolean;
    Pusher$interconnect3 : boolean;
    Pusher$interconnect_Slide1_Black : boolean;
    Pusher$interconnect_Slide1_Metal : boolean;
    Pusher$interconnect_Slide1_White : boolean;
    Pusher$interconnect_Slide2_Black : boolean;
    Pusher$interconnect_Slide2_Metal : boolean;
    Pusher$interconnect_Slide2_White : boolean;
    Stamp$AnalogCranePosition : signed word[16];
    Stamp$CraneDown : boolean;
    Stamp$CraneOnConveyor : boolean;
    Stamp$CranePositionStamp : boolean;
    Stamp$CraneSucked : boolean;
    Stamp$CraneUp : boolean;
    Stamp$Duration : unsigned word[16];
    Stamp$SFCInit : boolean;
    Stamp$SFCPause : boolean;
    Stamp$SFCReset : boolean;
    Stamp$StampGreenLamp : boolean;
    Stamp$StampLowered : boolean;
    Stamp$StampPressure : boolean;
    Stamp$StampPusher : boolean;
    Stamp$StampSliderFilled : boolean;
    Stamp$StampSliderMovedIn : boolean;
    Stamp$StampSliderMovedOut : boolean;
    Stamp$StampSliderSensorMovedIn : boolean;
    Stamp$StampSliderSensorMovedOut : boolean;
    Stamp$StampStartButton : boolean;
    Stamp$StampUp : boolean;
    Stamp$StampWhiteLamp : boolean;
    Stamp$StartCommandStamp : boolean;
    Stamp$StartVar : boolean;
    Stamp$Timer$ET : unsigned word[16];
    Stamp$Timer$IN : boolean;
    Stamp$Timer$PT : unsigned word[16];
    Stamp$Timer$Q : boolean;
    Stamp$__transit : boolean;
    Stamp$_state : {"INIT", START_STAMP, GREEN_LAMP, STAMP_INIT_1, STAMP_INIT_2, STAMP_INIT_3, STAMP_INIT_4, INTERSTEP, INTERTSEP_2, STEP0, STAMPSLIDERBACK, STAMPPROCESS, STEP1, STAMPSLIDERFORWARD, STEP2};
    Stamp$interconnect : boolean;
    Stamp$interconnectStampStartCommand : boolean;
-- end of VAR
DEFINE
    bc_1438_000_ := TRUE & !!((case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$SFCInit; 
    esac) | Stamp$SFCPause);
    bc_1438_1438_ := TRUE & !((case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$SFCInit; 
    esac) | Stamp$SFCPause);
    bc_1449_000_ := TRUE & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = "INIT") & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = START_STAMP) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = GREEN_LAMP) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STAMP_INIT_1) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STAMP_INIT_2) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STAMP_INIT_3) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STAMP_INIT_4) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = INTERSTEP) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = INTERTSEP_2) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STEP0) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STAMPSLIDERBACK) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STAMPPROCESS) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STEP1) & !((case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STAMPSLIDERFORWARD) & (case
        Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
        TRUE : Stamp$_state; 
    esac) = STEP2;
    bc_1405_1405_ := TRUE & (Stamp$SFCInit | Stamp$SFCReset);
    bc_1405_000_ := TRUE & !(Stamp$SFCInit | Stamp$SFCReset);
ASSIGN
    init(Actuator_AnalogCranePressure) := 0sd16_0;
    init(Actuator_CraneLower) := FALSE;
    init(Actuator_CraneTurnClockwise) := FALSE;
    init(Actuator_CraneTurnCounterclockwise) := FALSE;
    init(Actuator_MagazinGreenLamp) := FALSE;
    init(Actuator_MagazinSlider) := FALSE;
    init(Actuator_MagazinVacuumOff) := FALSE;
    init(Actuator_MagazinVacuumOn) := FALSE;
    init(Actuator_MagazinWhiteLamp) := FALSE;
    init(Actuator_PusherY1) := FALSE;
    init(Actuator_PusherY2) := FALSE;
    init(Actuator_SorterConveyorTowardsCrane) := FALSE;
    init(Actuator_SorterConveyorTowardsStacker) := FALSE;
    init(Actuator_SorterGreenLampConveyor) := FALSE;
    init(Actuator_SorterWhiteLampConveyor) := FALSE;
    init(Actuator_StampGreenLamp) := FALSE;
    init(Actuator_StampPusher) := FALSE;
    init(Actuator_StampSliderMovedIn) := FALSE;
    init(Actuator_StampSliderMovedOut) := FALSE;
    init(Actuator_StampWhiteLamp) := FALSE;
    init(Conveyor$Duration_Conveyor_Runtime) := 0ud16_0;
    init(Conveyor$Duration_Conveyor_Test) := 0ud16_0;
    init(Conveyor$SFCInit) := FALSE;
    init(Conveyor$SFCPause) := FALSE;
    init(Conveyor$SFCReset) := FALSE;
    init(Conveyor$SorterConveyorTowardsCrane) := FALSE;
    init(Conveyor$SorterConveyorTowardsStacker) := FALSE;
    init(Conveyor$SorterGreenLampConveyor) := FALSE;
    init(Conveyor$SorterLightbarrierCraneInterface) := FALSE;
    init(Conveyor$SorterStartButton) := FALSE;
    init(Conveyor$SorterSwitchManuellAutomatic) := FALSE;
    init(Conveyor$SorterWhiteLampConveyor) := FALSE;
    init(Conveyor$StartCommandConveyor) := FALSE;
    init(Conveyor$StartVar) := FALSE;
    init(Conveyor$Timer_Conveyor_Runtime$ET) := 0ud16_0;
    init(Conveyor$Timer_Conveyor_Runtime$IN) := FALSE;
    init(Conveyor$Timer_Conveyor_Runtime$PT) := 0ud16_0;
    init(Conveyor$Timer_Conveyor_Runtime$Q) := FALSE;
    init(Conveyor$Timer_Conveyor_Test$ET) := 0ud16_0;
    init(Conveyor$Timer_Conveyor_Test$IN) := FALSE;
    init(Conveyor$Timer_Conveyor_Test$PT) := 0ud16_0;
    init(Conveyor$Timer_Conveyor_Test$Q) := FALSE;
    init(Conveyor$__transit) := FALSE;
    init(Conveyor$_state) := "INIT";
    init(Conveyor$interconnectConveyorStartCommand) := FALSE;
    init(Conveyor$interconnectConveyorTerminationCommand) := FALSE;
    init(Conveyor$interconnect_Conveyor_Runtime) := FALSE;
    init(Conveyor$interconnect_Conveyor_Test) := FALSE;
    init(Crane$AnalogCranePosition) := 0sd16_0;
    init(Crane$AnalogCranePressure) := 0sd16_0;
    init(Crane$CraneDown) := FALSE;
    init(Crane$CraneLower) := FALSE;
    init(Crane$CraneSucked) := FALSE;
    init(Crane$CraneTurnClockwise) := FALSE;
    init(Crane$CraneTurnCounterclockwise) := FALSE;
    init(Crane$CraneUp) := FALSE;
    init(Crane$Duration1) := 0ud16_0;
    init(Crane$MagazinCapacitiveSensor) := FALSE;
    init(Crane$MagazinOpticalSensor) := FALSE;
    init(Crane$MagazinSlider) := FALSE;
    init(Crane$MagazinVacuumOff) := FALSE;
    init(Crane$MagazinVacuumOn) := FALSE;
    init(Crane$SFCInit) := FALSE;
    init(Crane$SFCPause) := FALSE;
    init(Crane$SFCReset) := FALSE;
    init(Crane$SliderMovedOut) := FALSE;
    init(Crane$SliderNotMovedOut) := FALSE;
    init(Crane$StampLowered) := FALSE;
    init(Crane$StampSliderFilled) := FALSE;
    init(Crane$StampSliderSensorMovedOut) := FALSE;
    init(Crane$StartButtonMagazin) := FALSE;
    init(Crane$StartCommandCrane) := FALSE;
    init(Crane$StartVar) := FALSE;
    init(Crane$TimeDelay_Timer$ET) := 0ud16_0;
    init(Crane$TimeDelay_Timer$IN) := FALSE;
    init(Crane$TimeDelay_Timer$PT) := 0ud16_0;
    init(Crane$TimeDelay_Timer$Q) := FALSE;
    init(Crane$TimeDelay_Timer_Duration) := 0ud16_0;
    init(Crane$TimeDelay_Timer_interconnect) := FALSE;
    init(Crane$Timer1$ET) := 0ud16_0;
    init(Crane$Timer1$IN) := FALSE;
    init(Crane$Timer1$PT) := 0ud16_0;
    init(Crane$Timer1$Q) := FALSE;
    init(Crane$WorkpieceReady) := FALSE;
    init(Crane$__transit) := FALSE;
    init(Crane$_state) := "INIT";
    init(Crane$actualtime1) := 0ud16_0;
    init(Crane$interconnect) := FALSE;
    init(Crane$interconnectCraneStartCommand) := FALSE;
    init(Mag$AnalogCranePosition) := 0sd16_0;
    init(Mag$CraneDown) := FALSE;
    init(Mag$CraneLower) := FALSE;
    init(Mag$CraneOnConveyor) := FALSE;
    init(Mag$CraneOnMagazin) := FALSE;
    init(Mag$CraneSucked) := FALSE;
    init(Mag$CraneTurnClockwise) := FALSE;
    init(Mag$CraneTurnCounterclockwise) := FALSE;
    init(Mag$CraneUp) := FALSE;
    init(Mag$MagazinGreenLamp) := FALSE;
    init(Mag$MagazinSlider) := FALSE;
    init(Mag$MagazinVacuumOff) := FALSE;
    init(Mag$MagazinVacuumOn) := FALSE;
    init(Mag$MagazinWhiteLamp) := FALSE;
    init(Mag$SFCInit) := FALSE;
    init(Mag$SFCPause) := FALSE;
    init(Mag$SFCReset) := FALSE;
    init(Mag$SliderMovedOut) := FALSE;
    init(Mag$SliderNotMovedOut) := FALSE;
    init(Mag$StartButtonMagazin) := FALSE;
    init(Mag$StartCommandMagazin) := FALSE;
    init(Mag$StartVar) := FALSE;
    init(Mag$WorkpieceReady) := FALSE;
    init(Mag$__transit) := FALSE;
    init(Mag$_state) := "INIT";
    init(Mag$interconnectMagazinStartCommand) := FALSE;
    init(Main$Conveyor$0$Conveyor$SFCReset__input) := FALSE;
    init(Main$Conveyor$0$Conveyor$SorterLightbarrierCraneInterface__input) := FALSE;
    init(Main$Conveyor$0$Conveyor$SorterStartButton__input) := FALSE;
    init(Main$Conveyor$0$Conveyor$SorterSwitchManuellAutomatic__input) := FALSE;
    init(Main$Conveyor$0$Conveyor$StartVar__input) := FALSE;
    init(Main$Conveyor$Timer_Conveyor_Runtime_ccnt) := 0ud8_0;
    init(Main$Conveyor$Timer_Conveyor_Test_ccnt) := 0ud8_0;
    init(Main$Conveyor_ccnt) := 0ud8_0;
    init(Main$Crane$0$Crane$AnalogCranePosition__input) := 0sd16_0;
    init(Main$Crane$0$Crane$CraneDown__input) := FALSE;
    init(Main$Crane$0$Crane$CraneSucked__input) := FALSE;
    init(Main$Crane$0$Crane$CraneUp__input) := FALSE;
    init(Main$Crane$0$Crane$MagazinCapacitiveSensor__input) := FALSE;
    init(Main$Crane$0$Crane$MagazinOpticalSensor__input) := FALSE;
    init(Main$Crane$0$Crane$SFCReset__input) := FALSE;
    init(Main$Crane$0$Crane$SliderMovedOut__input) := FALSE;
    init(Main$Crane$0$Crane$SliderNotMovedOut__input) := FALSE;
    init(Main$Crane$0$Crane$StampLowered__input) := FALSE;
    init(Main$Crane$0$Crane$StampSliderFilled__input) := FALSE;
    init(Main$Crane$0$Crane$StampSliderSensorMovedOut__input) := FALSE;
    init(Main$Crane$0$Crane$StartButtonMagazin__input) := FALSE;
    init(Main$Crane$0$Crane$StartVar__input) := FALSE;
    init(Main$Crane$0$Crane$WorkpieceReady__input) := FALSE;
    init(Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$IN__input) := FALSE;
    init(Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$PT__input) := 0ud16_0;
    init(Main$Crane$TimeDelay_Timer_ccnt) := 0ud8_0;
    init(Main$Crane$Timer1$0$Crane$Timer1$IN__input) := FALSE;
    init(Main$Crane$Timer1$0$Crane$Timer1$PT__input) := 0ud16_0;
    init(Main$Crane$Timer1$1$Crane$Timer1$IN__input) := FALSE;
    init(Main$Crane$Timer1$1$Crane$Timer1$PT__input) := 0ud16_0;
    init(Main$Crane$Timer1_ccnt) := 0ud8_0;
    init(Main$Crane_ccnt) := 0ud8_0;
    init(Main$Mag$0$Mag$AnalogCranePosition__input) := 0sd16_0;
    init(Main$Mag$0$Mag$CraneDown__input) := FALSE;
    init(Main$Mag$0$Mag$CraneOnConveyor__input) := FALSE;
    init(Main$Mag$0$Mag$CraneOnMagazin__input) := FALSE;
    init(Main$Mag$0$Mag$CraneSucked__input) := FALSE;
    init(Main$Mag$0$Mag$CraneUp__input) := FALSE;
    init(Main$Mag$0$Mag$SFCReset__input) := FALSE;
    init(Main$Mag$0$Mag$SliderMovedOut__input) := FALSE;
    init(Main$Mag$0$Mag$SliderNotMovedOut__input) := FALSE;
    init(Main$Mag$0$Mag$StartButtonMagazin__input) := FALSE;
    init(Main$Mag$0$Mag$StartVar__input) := FALSE;
    init(Main$Mag$0$Mag$WorkpieceReady__input) := FALSE;
    init(Main$Mag_ccnt) := 0ud8_0;
    init(Main$Pusher$0$Pusher$SFCReset__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher1__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher2__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterLightbarrierCraneInterface__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterLightnessSensorPusher1__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterLightnessSensorPusher2__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterLightnessSensorPusher3__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterLightnesssensorCraneInterfaceInverse__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterPusher1MovedIn__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterPusher1MovedOut__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterPusher2MovedIn__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterPusher2MovedOut__input) := FALSE;
    init(Main$Pusher$0$Pusher$SorterStartButton__input) := FALSE;
    init(Main$Pusher$0$Pusher$StartVar__input) := FALSE;
    init(Main$Pusher$Timer2_ccnt) := 0ud8_0;
    init(Main$Pusher$Timer3_ccnt) := 0ud8_0;
    init(Main$Pusher$Timer_Slide1_Black_ccnt) := 0ud8_0;
    init(Main$Pusher$Timer_Slide1_Metal_ccnt) := 0ud8_0;
    init(Main$Pusher$Timer_Slide1_White_ccnt) := 0ud8_0;
    init(Main$Pusher$Timer_Slide2_Black_ccnt) := 0ud8_0;
    init(Main$Pusher$Timer_Slide2_Metal_ccnt) := 0ud8_0;
    init(Main$Pusher$Timer_Slide2_White_ccnt) := 0ud8_0;
    init(Main$Pusher_ccnt) := 0ud8_0;
    init(Main$Stamp$0$Stamp$AnalogCranePosition__input) := 0sd16_0;
    init(Main$Stamp$0$Stamp$CraneDown__input) := FALSE;
    init(Main$Stamp$0$Stamp$CraneOnConveyor__input) := FALSE;
    init(Main$Stamp$0$Stamp$CranePositionStamp__input) := FALSE;
    init(Main$Stamp$0$Stamp$CraneSucked__input) := FALSE;
    init(Main$Stamp$0$Stamp$CraneUp__input) := FALSE;
    init(Main$Stamp$0$Stamp$SFCReset__input) := FALSE;
    init(Main$Stamp$0$Stamp$StampLowered__input) := FALSE;
    init(Main$Stamp$0$Stamp$StampSliderFilled__input) := FALSE;
    init(Main$Stamp$0$Stamp$StampSliderSensorMovedIn__input) := FALSE;
    init(Main$Stamp$0$Stamp$StampSliderSensorMovedOut__input) := FALSE;
    init(Main$Stamp$0$Stamp$StampStartButton__input) := FALSE;
    init(Main$Stamp$0$Stamp$StampUp__input) := FALSE;
    init(Main$Stamp$0$Stamp$StartVar__input) := FALSE;
    init(Main$Stamp$Timer$0$Stamp$Timer$IN__input) := FALSE;
    init(Main$Stamp$Timer$0$Stamp$Timer$PT__input) := 0ud16_0;
    init(Main$Stamp$Timer$1$Stamp$Timer$IN__input) := FALSE;
    init(Main$Stamp$Timer$1$Stamp$Timer$PT__input) := 0ud16_0;
    init(Main$Stamp$Timer_ccnt) := 0ud8_0;
    init(Main$Stamp_ccnt) := 0ud8_0;
    init(Pusher$Duration2) := 0ud16_0;
    init(Pusher$Duration3) := 0ud16_0;
    init(Pusher$Duration_Slide1_Black) := 0ud16_0;
    init(Pusher$Duration_Slide1_Metal) := 0ud16_0;
    init(Pusher$Duration_Slide1_White) := 0ud16_0;
    init(Pusher$Duration_Slide2_Black) := 0ud16_0;
    init(Pusher$Duration_Slide2_Metal) := 0ud16_0;
    init(Pusher$Duration_Slide2_White) := 0ud16_0;
    init(Pusher$Priority_Var_Black) := 0sd16_3;
    init(Pusher$Priority_Var_Metal) := 0sd16_3;
    init(Pusher$Priority_Var_White) := 0sd16_3;
    init(Pusher$PusherY1) := FALSE;
    init(Pusher$PusherY2) := FALSE;
    init(Pusher$SFCInit) := FALSE;
    init(Pusher$SFCPause) := FALSE;
    init(Pusher$SFCReset) := FALSE;
    init(Pusher$Slide1_black) := 0sd16_1;
    init(Pusher$Slide1_metal) := 0sd16_1;
    init(Pusher$Slide1_white) := 0sd16_1;
    init(Pusher$Slide2_black) := 0sd16_1;
    init(Pusher$Slide2_metal) := 0sd16_1;
    init(Pusher$Slide2_white) := 0sd16_1;
    init(Pusher$Slide3_black) := 0sd16_1;
    init(Pusher$Slide3_metal) := 0sd16_1;
    init(Pusher$Slide3_white) := 0sd16_1;
    init(Pusher$SorterCapacitiveSensorPusher1) := FALSE;
    init(Pusher$SorterCapacitiveSensorPusher2) := FALSE;
    init(Pusher$SorterLightbarrierCraneInterface) := FALSE;
    init(Pusher$SorterLightnessSensorPusher1) := FALSE;
    init(Pusher$SorterLightnessSensorPusher2) := FALSE;
    init(Pusher$SorterLightnessSensorPusher3) := FALSE;
    init(Pusher$SorterLightnesssensorCraneInterfaceInverse) := FALSE;
    init(Pusher$SorterPusher1MovedIn) := FALSE;
    init(Pusher$SorterPusher1MovedOut) := FALSE;
    init(Pusher$SorterPusher2MovedIn) := FALSE;
    init(Pusher$SorterPusher2MovedOut) := FALSE;
    init(Pusher$SorterStartButton) := FALSE;
    init(Pusher$StartVar) := FALSE;
    init(Pusher$Timer2$ET) := 0ud16_0;
    init(Pusher$Timer2$IN) := FALSE;
    init(Pusher$Timer2$PT) := 0ud16_0;
    init(Pusher$Timer2$Q) := FALSE;
    init(Pusher$Timer3$ET) := 0ud16_0;
    init(Pusher$Timer3$IN) := FALSE;
    init(Pusher$Timer3$PT) := 0ud16_0;
    init(Pusher$Timer3$Q) := FALSE;
    init(Pusher$Timer_Slide1_Black$ET) := 0ud16_0;
    init(Pusher$Timer_Slide1_Black$IN) := FALSE;
    init(Pusher$Timer_Slide1_Black$PT) := 0ud16_0;
    init(Pusher$Timer_Slide1_Black$Q) := FALSE;
    init(Pusher$Timer_Slide1_Metal$ET) := 0ud16_0;
    init(Pusher$Timer_Slide1_Metal$IN) := FALSE;
    init(Pusher$Timer_Slide1_Metal$PT) := 0ud16_0;
    init(Pusher$Timer_Slide1_Metal$Q) := FALSE;
    init(Pusher$Timer_Slide1_White$ET) := 0ud16_0;
    init(Pusher$Timer_Slide1_White$IN) := FALSE;
    init(Pusher$Timer_Slide1_White$PT) := 0ud16_0;
    init(Pusher$Timer_Slide1_White$Q) := FALSE;
    init(Pusher$Timer_Slide2_Black$ET) := 0ud16_0;
    init(Pusher$Timer_Slide2_Black$IN) := FALSE;
    init(Pusher$Timer_Slide2_Black$PT) := 0ud16_0;
    init(Pusher$Timer_Slide2_Black$Q) := FALSE;
    init(Pusher$Timer_Slide2_Metal$ET) := 0ud16_0;
    init(Pusher$Timer_Slide2_Metal$IN) := FALSE;
    init(Pusher$Timer_Slide2_Metal$PT) := 0ud16_0;
    init(Pusher$Timer_Slide2_Metal$Q) := FALSE;
    init(Pusher$Timer_Slide2_White$ET) := 0ud16_0;
    init(Pusher$Timer_Slide2_White$IN) := FALSE;
    init(Pusher$Timer_Slide2_White$PT) := 0ud16_0;
    init(Pusher$Timer_Slide2_White$Q) := FALSE;
    init(Pusher$__transit) := FALSE;
    init(Pusher$_state) := "INIT";
    init(Pusher$interconnect2) := FALSE;
    init(Pusher$interconnect3) := FALSE;
    init(Pusher$interconnect_Slide1_Black) := FALSE;
    init(Pusher$interconnect_Slide1_Metal) := FALSE;
    init(Pusher$interconnect_Slide1_White) := FALSE;
    init(Pusher$interconnect_Slide2_Black) := FALSE;
    init(Pusher$interconnect_Slide2_Metal) := FALSE;
    init(Pusher$interconnect_Slide2_White) := FALSE;
    init(Stamp$AnalogCranePosition) := 0sd16_0;
    init(Stamp$CraneDown) := FALSE;
    init(Stamp$CraneOnConveyor) := FALSE;
    init(Stamp$CranePositionStamp) := FALSE;
    init(Stamp$CraneSucked) := FALSE;
    init(Stamp$CraneUp) := FALSE;
    init(Stamp$Duration) := 0ud16_0;
    init(Stamp$SFCInit) := FALSE;
    init(Stamp$SFCPause) := FALSE;
    init(Stamp$SFCReset) := FALSE;
    init(Stamp$StampGreenLamp) := FALSE;
    init(Stamp$StampLowered) := FALSE;
    init(Stamp$StampPressure) := FALSE;
    init(Stamp$StampPusher) := FALSE;
    init(Stamp$StampSliderFilled) := FALSE;
    init(Stamp$StampSliderMovedIn) := FALSE;
    init(Stamp$StampSliderMovedOut) := FALSE;
    init(Stamp$StampSliderSensorMovedIn) := FALSE;
    init(Stamp$StampSliderSensorMovedOut) := FALSE;
    init(Stamp$StampStartButton) := FALSE;
    init(Stamp$StampUp) := FALSE;
    init(Stamp$StampWhiteLamp) := FALSE;
    init(Stamp$StartCommandStamp) := FALSE;
    init(Stamp$StartVar) := FALSE;
    init(Stamp$Timer$ET) := 0ud16_0;
    init(Stamp$Timer$IN) := FALSE;
    init(Stamp$Timer$PT) := 0ud16_0;
    init(Stamp$Timer$Q) := FALSE;
    init(Stamp$__transit) := FALSE;
    init(Stamp$_state) := "INIT";
    init(Stamp$interconnect) := FALSE;
    init(Stamp$interconnectStampStartCommand) := FALSE;
    next(Actuator_AnalogCranePressure) := Actuator_AnalogCranePressure;
    next(Actuator_CraneLower) := Actuator_CraneLower;
    next(Actuator_CraneTurnClockwise) := Actuator_CraneTurnClockwise;
    next(Actuator_CraneTurnCounterclockwise) := Actuator_CraneTurnCounterclockwise;
    next(Actuator_MagazinGreenLamp) := Actuator_MagazinGreenLamp;
    next(Actuator_MagazinSlider) := Actuator_MagazinSlider;
    next(Actuator_MagazinVacuumOff) := Actuator_MagazinVacuumOff;
    next(Actuator_MagazinVacuumOn) := Actuator_MagazinVacuumOn;
    next(Actuator_MagazinWhiteLamp) := Actuator_MagazinWhiteLamp;
    next(Actuator_PusherY1) := Actuator_PusherY1;
    next(Actuator_PusherY2) := Actuator_PusherY2;
    next(Actuator_SorterConveyorTowardsCrane) := Actuator_SorterConveyorTowardsCrane;
    next(Actuator_SorterConveyorTowardsStacker) := Actuator_SorterConveyorTowardsStacker;
    next(Actuator_SorterGreenLampConveyor) := Actuator_SorterGreenLampConveyor;
    next(Actuator_SorterWhiteLampConveyor) := Actuator_SorterWhiteLampConveyor;
    next(Actuator_StampGreenLamp) := Actuator_StampGreenLamp;
    next(Actuator_StampPusher) := Actuator_StampPusher;
    next(Actuator_StampSliderMovedIn) := Actuator_StampSliderMovedIn;
    next(Actuator_StampSliderMovedOut) := Actuator_StampSliderMovedOut;
    next(Actuator_StampWhiteLamp) := Actuator_StampWhiteLamp;
    next(Conveyor$Duration_Conveyor_Runtime) := Conveyor$Duration_Conveyor_Runtime;
    next(Conveyor$Duration_Conveyor_Test) := Conveyor$Duration_Conveyor_Test;
    next(Conveyor$SFCInit) := Conveyor$SFCInit;
    next(Conveyor$SFCPause) := Conveyor$SFCPause;
    next(Conveyor$SFCReset) := Conveyor$SFCReset;
    next(Conveyor$SorterConveyorTowardsCrane) := Conveyor$SorterConveyorTowardsCrane;
    next(Conveyor$SorterConveyorTowardsStacker) := Conveyor$SorterConveyorTowardsStacker;
    next(Conveyor$SorterGreenLampConveyor) := Conveyor$SorterGreenLampConveyor;
    next(Conveyor$SorterLightbarrierCraneInterface) := Conveyor$SorterLightbarrierCraneInterface;
    next(Conveyor$SorterStartButton) := Conveyor$SorterStartButton;
    next(Conveyor$SorterSwitchManuellAutomatic) := Conveyor$SorterSwitchManuellAutomatic;
    next(Conveyor$SorterWhiteLampConveyor) := Conveyor$SorterWhiteLampConveyor;
    next(Conveyor$StartCommandConveyor) := Conveyor$StartCommandConveyor;
    next(Conveyor$StartVar) := Conveyor$StartVar;
    next(Conveyor$Timer_Conveyor_Runtime$ET) := Conveyor$Timer_Conveyor_Runtime$ET;
    next(Conveyor$Timer_Conveyor_Runtime$IN) := Conveyor$Timer_Conveyor_Runtime$IN;
    next(Conveyor$Timer_Conveyor_Runtime$PT) := Conveyor$Timer_Conveyor_Runtime$PT;
    next(Conveyor$Timer_Conveyor_Runtime$Q) := Conveyor$Timer_Conveyor_Runtime$Q;
    next(Conveyor$Timer_Conveyor_Test$ET) := Conveyor$Timer_Conveyor_Test$ET;
    next(Conveyor$Timer_Conveyor_Test$IN) := Conveyor$Timer_Conveyor_Test$IN;
    next(Conveyor$Timer_Conveyor_Test$PT) := Conveyor$Timer_Conveyor_Test$PT;
    next(Conveyor$Timer_Conveyor_Test$Q) := Conveyor$Timer_Conveyor_Test$Q;
    next(Conveyor$__transit) := Conveyor$__transit;
    next(Conveyor$_state) := Conveyor$_state;
    next(Conveyor$interconnectConveyorStartCommand) := Conveyor$interconnectConveyorStartCommand;
    next(Conveyor$interconnectConveyorTerminationCommand) := Conveyor$interconnectConveyorTerminationCommand;
    next(Conveyor$interconnect_Conveyor_Runtime) := Conveyor$interconnect_Conveyor_Runtime;
    next(Conveyor$interconnect_Conveyor_Test) := Conveyor$interconnect_Conveyor_Test;
    next(Crane$AnalogCranePosition) := Crane$AnalogCranePosition;
    next(Crane$AnalogCranePressure) := Crane$AnalogCranePressure;
    next(Crane$CraneDown) := Crane$CraneDown;
    next(Crane$CraneLower) := Crane$CraneLower;
    next(Crane$CraneSucked) := Crane$CraneSucked;
    next(Crane$CraneTurnClockwise) := Crane$CraneTurnClockwise;
    next(Crane$CraneTurnCounterclockwise) := Crane$CraneTurnCounterclockwise;
    next(Crane$CraneUp) := Crane$CraneUp;
    next(Crane$Duration1) := Crane$Duration1;
    next(Crane$MagazinCapacitiveSensor) := Crane$MagazinCapacitiveSensor;
    next(Crane$MagazinOpticalSensor) := Crane$MagazinOpticalSensor;
    next(Crane$MagazinSlider) := Crane$MagazinSlider;
    next(Crane$MagazinVacuumOff) := Crane$MagazinVacuumOff;
    next(Crane$MagazinVacuumOn) := Crane$MagazinVacuumOn;
    next(Crane$SFCInit) := Crane$SFCInit;
    next(Crane$SFCPause) := Crane$SFCPause;
    next(Crane$SFCReset) := Crane$SFCReset;
    next(Crane$SliderMovedOut) := Crane$SliderMovedOut;
    next(Crane$SliderNotMovedOut) := Crane$SliderNotMovedOut;
    next(Crane$StampLowered) := Crane$StampLowered;
    next(Crane$StampSliderFilled) := Crane$StampSliderFilled;
    next(Crane$StampSliderSensorMovedOut) := Crane$StampSliderSensorMovedOut;
    next(Crane$StartButtonMagazin) := Crane$StartButtonMagazin;
    next(Crane$StartCommandCrane) := Crane$StartCommandCrane;
    next(Crane$StartVar) := Crane$StartVar;
    next(Crane$TimeDelay_Timer$ET) := Crane$TimeDelay_Timer$ET;
    next(Crane$TimeDelay_Timer$IN) := Crane$TimeDelay_Timer$IN;
    next(Crane$TimeDelay_Timer$PT) := Crane$TimeDelay_Timer$PT;
    next(Crane$TimeDelay_Timer$Q) := Crane$TimeDelay_Timer$Q;
    next(Crane$TimeDelay_Timer_Duration) := Crane$TimeDelay_Timer_Duration;
    next(Crane$TimeDelay_Timer_interconnect) := Crane$TimeDelay_Timer_interconnect;
    next(Crane$Timer1$ET) := Crane$Timer1$ET;
    next(Crane$Timer1$IN) := Crane$Timer1$IN;
    next(Crane$Timer1$PT) := Crane$Timer1$PT;
    next(Crane$Timer1$Q) := Crane$Timer1$Q;
    next(Crane$WorkpieceReady) := Crane$WorkpieceReady;
    next(Crane$__transit) := Crane$__transit;
    next(Crane$_state) := Crane$_state;
    next(Crane$actualtime1) := Crane$actualtime1;
    next(Crane$interconnect) := Crane$interconnect;
    next(Crane$interconnectCraneStartCommand) := Crane$interconnectCraneStartCommand;
    next(Mag$AnalogCranePosition) := Mag$AnalogCranePosition;
    next(Mag$CraneDown) := Mag$CraneDown;
    next(Mag$CraneLower) := Mag$CraneLower;
    next(Mag$CraneOnConveyor) := Mag$CraneOnConveyor;
    next(Mag$CraneOnMagazin) := Mag$CraneOnMagazin;
    next(Mag$CraneSucked) := Mag$CraneSucked;
    next(Mag$CraneTurnClockwise) := Mag$CraneTurnClockwise;
    next(Mag$CraneTurnCounterclockwise) := Mag$CraneTurnCounterclockwise;
    next(Mag$CraneUp) := Mag$CraneUp;
    next(Mag$MagazinGreenLamp) := Mag$MagazinGreenLamp;
    next(Mag$MagazinSlider) := Mag$MagazinSlider;
    next(Mag$MagazinVacuumOff) := Mag$MagazinVacuumOff;
    next(Mag$MagazinVacuumOn) := Mag$MagazinVacuumOn;
    next(Mag$MagazinWhiteLamp) := Mag$MagazinWhiteLamp;
    next(Mag$SFCInit) := Mag$SFCInit;
    next(Mag$SFCPause) := Mag$SFCPause;
    next(Mag$SFCReset) := Mag$SFCReset;
    next(Mag$SliderMovedOut) := Mag$SliderMovedOut;
    next(Mag$SliderNotMovedOut) := Mag$SliderNotMovedOut;
    next(Mag$StartButtonMagazin) := Mag$StartButtonMagazin;
    next(Mag$StartCommandMagazin) := Mag$StartCommandMagazin;
    next(Mag$StartVar) := Mag$StartVar;
    next(Mag$WorkpieceReady) := Mag$WorkpieceReady;
    next(Mag$__transit) := Mag$__transit;
    next(Mag$_state) := Mag$_state;
    next(Mag$interconnectMagazinStartCommand) := Mag$interconnectMagazinStartCommand;
    next(Main$Conveyor$0$Conveyor$SFCReset__input) := Main$Conveyor$0$Conveyor$SFCReset__input;
    next(Main$Conveyor$0$Conveyor$SorterLightbarrierCraneInterface__input) := Main$Conveyor$0$Conveyor$SorterLightbarrierCraneInterface__input;
    next(Main$Conveyor$0$Conveyor$SorterStartButton__input) := Main$Conveyor$0$Conveyor$SorterStartButton__input;
    next(Main$Conveyor$0$Conveyor$SorterSwitchManuellAutomatic__input) := Main$Conveyor$0$Conveyor$SorterSwitchManuellAutomatic__input;
    next(Main$Conveyor$0$Conveyor$StartVar__input) := Main$Conveyor$0$Conveyor$StartVar__input;
    next(Main$Conveyor$Timer_Conveyor_Runtime_ccnt) := Main$Conveyor$Timer_Conveyor_Runtime_ccnt;
    next(Main$Conveyor$Timer_Conveyor_Test_ccnt) := Main$Conveyor$Timer_Conveyor_Test_ccnt;
    next(Main$Conveyor_ccnt) := Main$Conveyor_ccnt;
    next(Main$Crane$0$Crane$AnalogCranePosition__input) := Main$Crane$0$Crane$AnalogCranePosition__input;
    next(Main$Crane$0$Crane$CraneDown__input) := Main$Crane$0$Crane$CraneDown__input;
    next(Main$Crane$0$Crane$CraneSucked__input) := Main$Crane$0$Crane$CraneSucked__input;
    next(Main$Crane$0$Crane$CraneUp__input) := Main$Crane$0$Crane$CraneUp__input;
    next(Main$Crane$0$Crane$MagazinCapacitiveSensor__input) := Main$Crane$0$Crane$MagazinCapacitiveSensor__input;
    next(Main$Crane$0$Crane$MagazinOpticalSensor__input) := Main$Crane$0$Crane$MagazinOpticalSensor__input;
    next(Main$Crane$0$Crane$SFCReset__input) := Main$Crane$0$Crane$SFCReset__input;
    next(Main$Crane$0$Crane$SliderMovedOut__input) := Main$Crane$0$Crane$SliderMovedOut__input;
    next(Main$Crane$0$Crane$SliderNotMovedOut__input) := Main$Crane$0$Crane$SliderNotMovedOut__input;
    next(Main$Crane$0$Crane$StampLowered__input) := Main$Crane$0$Crane$StampLowered__input;
    next(Main$Crane$0$Crane$StampSliderFilled__input) := Main$Crane$0$Crane$StampSliderFilled__input;
    next(Main$Crane$0$Crane$StampSliderSensorMovedOut__input) := Main$Crane$0$Crane$StampSliderSensorMovedOut__input;
    next(Main$Crane$0$Crane$StartButtonMagazin__input) := Main$Crane$0$Crane$StartButtonMagazin__input;
    next(Main$Crane$0$Crane$StartVar__input) := Main$Crane$0$Crane$StartVar__input;
    next(Main$Crane$0$Crane$WorkpieceReady__input) := Main$Crane$0$Crane$WorkpieceReady__input;
    next(Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$IN__input) := Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$IN__input;
    next(Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$PT__input) := Main$Crane$TimeDelay_Timer$0$Crane$TimeDelay_Timer$PT__input;
    next(Main$Crane$TimeDelay_Timer_ccnt) := Main$Crane$TimeDelay_Timer_ccnt;
    next(Main$Crane$Timer1$0$Crane$Timer1$IN__input) := Main$Crane$Timer1$0$Crane$Timer1$IN__input;
    next(Main$Crane$Timer1$0$Crane$Timer1$PT__input) := Main$Crane$Timer1$0$Crane$Timer1$PT__input;
    next(Main$Crane$Timer1$1$Crane$Timer1$IN__input) := Main$Crane$Timer1$1$Crane$Timer1$IN__input;
    next(Main$Crane$Timer1$1$Crane$Timer1$PT__input) := Main$Crane$Timer1$1$Crane$Timer1$PT__input;
    next(Main$Crane$Timer1_ccnt) := Main$Crane$Timer1_ccnt;
    next(Main$Crane_ccnt) := Main$Crane_ccnt;
    next(Main$Mag$0$Mag$AnalogCranePosition__input) := Main$Mag$0$Mag$AnalogCranePosition__input;
    next(Main$Mag$0$Mag$CraneDown__input) := Main$Mag$0$Mag$CraneDown__input;
    next(Main$Mag$0$Mag$CraneOnConveyor__input) := Main$Mag$0$Mag$CraneOnConveyor__input;
    next(Main$Mag$0$Mag$CraneOnMagazin__input) := Main$Mag$0$Mag$CraneOnMagazin__input;
    next(Main$Mag$0$Mag$CraneSucked__input) := Main$Mag$0$Mag$CraneSucked__input;
    next(Main$Mag$0$Mag$CraneUp__input) := Main$Mag$0$Mag$CraneUp__input;
    next(Main$Mag$0$Mag$SFCReset__input) := Main$Mag$0$Mag$SFCReset__input;
    next(Main$Mag$0$Mag$SliderMovedOut__input) := Main$Mag$0$Mag$SliderMovedOut__input;
    next(Main$Mag$0$Mag$SliderNotMovedOut__input) := Main$Mag$0$Mag$SliderNotMovedOut__input;
    next(Main$Mag$0$Mag$StartButtonMagazin__input) := Main$Mag$0$Mag$StartButtonMagazin__input;
    next(Main$Mag$0$Mag$StartVar__input) := Main$Mag$0$Mag$StartVar__input;
    next(Main$Mag$0$Mag$WorkpieceReady__input) := Main$Mag$0$Mag$WorkpieceReady__input;
    next(Main$Mag_ccnt) := Main$Mag_ccnt;
    next(Main$Pusher$0$Pusher$SFCReset__input) := Main$Pusher$0$Pusher$SFCReset__input;
    next(Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher1__input) := Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher1__input;
    next(Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher2__input) := Main$Pusher$0$Pusher$SorterCapacitiveSensorPusher2__input;
    next(Main$Pusher$0$Pusher$SorterLightbarrierCraneInterface__input) := Main$Pusher$0$Pusher$SorterLightbarrierCraneInterface__input;
    next(Main$Pusher$0$Pusher$SorterLightnessSensorPusher1__input) := Main$Pusher$0$Pusher$SorterLightnessSensorPusher1__input;
    next(Main$Pusher$0$Pusher$SorterLightnessSensorPusher2__input) := Main$Pusher$0$Pusher$SorterLightnessSensorPusher2__input;
    next(Main$Pusher$0$Pusher$SorterLightnessSensorPusher3__input) := Main$Pusher$0$Pusher$SorterLightnessSensorPusher3__input;
    next(Main$Pusher$0$Pusher$SorterLightnesssensorCraneInterfaceInverse__input) := Main$Pusher$0$Pusher$SorterLightnesssensorCraneInterfaceInverse__input;
    next(Main$Pusher$0$Pusher$SorterPusher1MovedIn__input) := Main$Pusher$0$Pusher$SorterPusher1MovedIn__input;
    next(Main$Pusher$0$Pusher$SorterPusher1MovedOut__input) := Main$Pusher$0$Pusher$SorterPusher1MovedOut__input;
    next(Main$Pusher$0$Pusher$SorterPusher2MovedIn__input) := Main$Pusher$0$Pusher$SorterPusher2MovedIn__input;
    next(Main$Pusher$0$Pusher$SorterPusher2MovedOut__input) := Main$Pusher$0$Pusher$SorterPusher2MovedOut__input;
    next(Main$Pusher$0$Pusher$SorterStartButton__input) := Main$Pusher$0$Pusher$SorterStartButton__input;
    next(Main$Pusher$0$Pusher$StartVar__input) := Main$Pusher$0$Pusher$StartVar__input;
    next(Main$Pusher$Timer2_ccnt) := Main$Pusher$Timer2_ccnt;
    next(Main$Pusher$Timer3_ccnt) := Main$Pusher$Timer3_ccnt;
    next(Main$Pusher$Timer_Slide1_Black_ccnt) := Main$Pusher$Timer_Slide1_Black_ccnt;
    next(Main$Pusher$Timer_Slide1_Metal_ccnt) := Main$Pusher$Timer_Slide1_Metal_ccnt;
    next(Main$Pusher$Timer_Slide1_White_ccnt) := Main$Pusher$Timer_Slide1_White_ccnt;
    next(Main$Pusher$Timer_Slide2_Black_ccnt) := Main$Pusher$Timer_Slide2_Black_ccnt;
    next(Main$Pusher$Timer_Slide2_Metal_ccnt) := Main$Pusher$Timer_Slide2_Metal_ccnt;
    next(Main$Pusher$Timer_Slide2_White_ccnt) := Main$Pusher$Timer_Slide2_White_ccnt;
    next(Main$Pusher_ccnt) := Main$Pusher_ccnt;
    next(Main$Stamp$0$Stamp$AnalogCranePosition__input) := Main$Stamp$0$Stamp$AnalogCranePosition__input;
    next(Main$Stamp$0$Stamp$CraneDown__input) := Main$Stamp$0$Stamp$CraneDown__input;
    next(Main$Stamp$0$Stamp$CraneOnConveyor__input) := Main$Stamp$0$Stamp$CraneOnConveyor__input;
    next(Main$Stamp$0$Stamp$CranePositionStamp__input) := Main$Stamp$0$Stamp$CranePositionStamp__input;
    next(Main$Stamp$0$Stamp$CraneSucked__input) := Main$Stamp$0$Stamp$CraneSucked__input;
    next(Main$Stamp$0$Stamp$CraneUp__input) := Main$Stamp$0$Stamp$CraneUp__input;
    next(Main$Stamp$0$Stamp$SFCReset__input) := Main$Stamp$0$Stamp$SFCReset__input;
    next(Main$Stamp$0$Stamp$StampLowered__input) := Main$Stamp$0$Stamp$StampLowered__input;
    next(Main$Stamp$0$Stamp$StampSliderFilled__input) := Main$Stamp$0$Stamp$StampSliderFilled__input;
    next(Main$Stamp$0$Stamp$StampSliderSensorMovedIn__input) := Main$Stamp$0$Stamp$StampSliderSensorMovedIn__input;
    next(Main$Stamp$0$Stamp$StampSliderSensorMovedOut__input) := Main$Stamp$0$Stamp$StampSliderSensorMovedOut__input;
    next(Main$Stamp$0$Stamp$StampStartButton__input) := Main$Stamp$0$Stamp$StampStartButton__input;
    next(Main$Stamp$0$Stamp$StampUp__input) := Main$Stamp$0$Stamp$StampUp__input;
    next(Main$Stamp$0$Stamp$StartVar__input) := Main$Stamp$0$Stamp$StartVar__input;
    next(Main$Stamp$Timer$0$Stamp$Timer$IN__input) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : Main$Stamp$Timer$0$Stamp$Timer$IN__input; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampLowered; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : Main$Stamp$Timer$0$Stamp$Timer$IN__input; 
        esac; 
        TRUE : Main$Stamp$Timer$0$Stamp$Timer$IN__input; 
    esac;
    next(Main$Stamp$Timer$0$Stamp$Timer$PT__input) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : Main$Stamp$Timer$0$Stamp$Timer$PT__input; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : 0ud16_0; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : Main$Stamp$Timer$0$Stamp$Timer$PT__input; 
        esac; 
        TRUE : Main$Stamp$Timer$0$Stamp$Timer$PT__input; 
    esac;
    next(Main$Stamp$Timer$1$Stamp$Timer$IN__input) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : Main$Stamp$Timer$1$Stamp$Timer$IN__input; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : Main$Stamp$Timer$1$Stamp$Timer$IN__input; 
        esac; 
        TRUE : Main$Stamp$Timer$1$Stamp$Timer$IN__input; 
    esac;
    next(Main$Stamp$Timer$1$Stamp$Timer$PT__input) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : Main$Stamp$Timer$1$Stamp$Timer$PT__input; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : 0ud16_0; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : Main$Stamp$Timer$1$Stamp$Timer$PT__input; 
        esac; 
        TRUE : Main$Stamp$Timer$1$Stamp$Timer$PT__input; 
    esac;
    next(Main$Stamp$Timer_ccnt) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : 0ud8_0; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : 0ud8_0 + 0ud8_1; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : 0ud8_0; 
        esac; 
        TRUE : 0ud8_0; 
    esac;
    next(Main$Stamp_ccnt) := 0ud8_0;
    next(Pusher$Duration2) := Pusher$Duration2;
    next(Pusher$Duration3) := Pusher$Duration3;
    next(Pusher$Duration_Slide1_Black) := Pusher$Duration_Slide1_Black;
    next(Pusher$Duration_Slide1_Metal) := Pusher$Duration_Slide1_Metal;
    next(Pusher$Duration_Slide1_White) := Pusher$Duration_Slide1_White;
    next(Pusher$Duration_Slide2_Black) := Pusher$Duration_Slide2_Black;
    next(Pusher$Duration_Slide2_Metal) := Pusher$Duration_Slide2_Metal;
    next(Pusher$Duration_Slide2_White) := Pusher$Duration_Slide2_White;
    next(Pusher$Priority_Var_Black) := Pusher$Priority_Var_Black;
    next(Pusher$Priority_Var_Metal) := Pusher$Priority_Var_Metal;
    next(Pusher$Priority_Var_White) := Pusher$Priority_Var_White;
    next(Pusher$PusherY1) := Pusher$PusherY1;
    next(Pusher$PusherY2) := Pusher$PusherY2;
    next(Pusher$SFCInit) := Pusher$SFCInit;
    next(Pusher$SFCPause) := Pusher$SFCPause;
    next(Pusher$SFCReset) := Pusher$SFCReset;
    next(Pusher$Slide1_black) := Pusher$Slide1_black;
    next(Pusher$Slide1_metal) := Pusher$Slide1_metal;
    next(Pusher$Slide1_white) := Pusher$Slide1_white;
    next(Pusher$Slide2_black) := Pusher$Slide2_black;
    next(Pusher$Slide2_metal) := Pusher$Slide2_metal;
    next(Pusher$Slide2_white) := Pusher$Slide2_white;
    next(Pusher$Slide3_black) := Pusher$Slide3_black;
    next(Pusher$Slide3_metal) := Pusher$Slide3_metal;
    next(Pusher$Slide3_white) := Pusher$Slide3_white;
    next(Pusher$SorterCapacitiveSensorPusher1) := Pusher$SorterCapacitiveSensorPusher1;
    next(Pusher$SorterCapacitiveSensorPusher2) := Pusher$SorterCapacitiveSensorPusher2;
    next(Pusher$SorterLightbarrierCraneInterface) := Pusher$SorterLightbarrierCraneInterface;
    next(Pusher$SorterLightnessSensorPusher1) := Pusher$SorterLightnessSensorPusher1;
    next(Pusher$SorterLightnessSensorPusher2) := Pusher$SorterLightnessSensorPusher2;
    next(Pusher$SorterLightnessSensorPusher3) := Pusher$SorterLightnessSensorPusher3;
    next(Pusher$SorterLightnesssensorCraneInterfaceInverse) := Pusher$SorterLightnesssensorCraneInterfaceInverse;
    next(Pusher$SorterPusher1MovedIn) := Pusher$SorterPusher1MovedIn;
    next(Pusher$SorterPusher1MovedOut) := Pusher$SorterPusher1MovedOut;
    next(Pusher$SorterPusher2MovedIn) := Pusher$SorterPusher2MovedIn;
    next(Pusher$SorterPusher2MovedOut) := Pusher$SorterPusher2MovedOut;
    next(Pusher$SorterStartButton) := Pusher$SorterStartButton;
    next(Pusher$StartVar) := Pusher$StartVar;
    next(Pusher$Timer2$ET) := Pusher$Timer2$ET;
    next(Pusher$Timer2$IN) := Pusher$Timer2$IN;
    next(Pusher$Timer2$PT) := Pusher$Timer2$PT;
    next(Pusher$Timer2$Q) := Pusher$Timer2$Q;
    next(Pusher$Timer3$ET) := Pusher$Timer3$ET;
    next(Pusher$Timer3$IN) := Pusher$Timer3$IN;
    next(Pusher$Timer3$PT) := Pusher$Timer3$PT;
    next(Pusher$Timer3$Q) := Pusher$Timer3$Q;
    next(Pusher$Timer_Slide1_Black$ET) := Pusher$Timer_Slide1_Black$ET;
    next(Pusher$Timer_Slide1_Black$IN) := Pusher$Timer_Slide1_Black$IN;
    next(Pusher$Timer_Slide1_Black$PT) := Pusher$Timer_Slide1_Black$PT;
    next(Pusher$Timer_Slide1_Black$Q) := Pusher$Timer_Slide1_Black$Q;
    next(Pusher$Timer_Slide1_Metal$ET) := Pusher$Timer_Slide1_Metal$ET;
    next(Pusher$Timer_Slide1_Metal$IN) := Pusher$Timer_Slide1_Metal$IN;
    next(Pusher$Timer_Slide1_Metal$PT) := Pusher$Timer_Slide1_Metal$PT;
    next(Pusher$Timer_Slide1_Metal$Q) := Pusher$Timer_Slide1_Metal$Q;
    next(Pusher$Timer_Slide1_White$ET) := Pusher$Timer_Slide1_White$ET;
    next(Pusher$Timer_Slide1_White$IN) := Pusher$Timer_Slide1_White$IN;
    next(Pusher$Timer_Slide1_White$PT) := Pusher$Timer_Slide1_White$PT;
    next(Pusher$Timer_Slide1_White$Q) := Pusher$Timer_Slide1_White$Q;
    next(Pusher$Timer_Slide2_Black$ET) := Pusher$Timer_Slide2_Black$ET;
    next(Pusher$Timer_Slide2_Black$IN) := Pusher$Timer_Slide2_Black$IN;
    next(Pusher$Timer_Slide2_Black$PT) := Pusher$Timer_Slide2_Black$PT;
    next(Pusher$Timer_Slide2_Black$Q) := Pusher$Timer_Slide2_Black$Q;
    next(Pusher$Timer_Slide2_Metal$ET) := Pusher$Timer_Slide2_Metal$ET;
    next(Pusher$Timer_Slide2_Metal$IN) := Pusher$Timer_Slide2_Metal$IN;
    next(Pusher$Timer_Slide2_Metal$PT) := Pusher$Timer_Slide2_Metal$PT;
    next(Pusher$Timer_Slide2_Metal$Q) := Pusher$Timer_Slide2_Metal$Q;
    next(Pusher$Timer_Slide2_White$ET) := Pusher$Timer_Slide2_White$ET;
    next(Pusher$Timer_Slide2_White$IN) := Pusher$Timer_Slide2_White$IN;
    next(Pusher$Timer_Slide2_White$PT) := Pusher$Timer_Slide2_White$PT;
    next(Pusher$Timer_Slide2_White$Q) := Pusher$Timer_Slide2_White$Q;
    next(Pusher$__transit) := Pusher$__transit;
    next(Pusher$_state) := Pusher$_state;
    next(Pusher$interconnect2) := Pusher$interconnect2;
    next(Pusher$interconnect3) := Pusher$interconnect3;
    next(Pusher$interconnect_Slide1_Black) := Pusher$interconnect_Slide1_Black;
    next(Pusher$interconnect_Slide1_Metal) := Pusher$interconnect_Slide1_Metal;
    next(Pusher$interconnect_Slide1_White) := Pusher$interconnect_Slide1_White;
    next(Pusher$interconnect_Slide2_Black) := Pusher$interconnect_Slide2_Black;
    next(Pusher$interconnect_Slide2_Metal) := Pusher$interconnect_Slide2_Metal;
    next(Pusher$interconnect_Slide2_White) := Pusher$interconnect_Slide2_White;
    next(Stamp$AnalogCranePosition) := case
        Stamp$SFCInit | Stamp$SFCReset : 0sd16_0; 
        TRUE : Stamp$AnalogCranePosition; 
    esac;
    next(Stamp$CraneDown) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$CraneDown; 
    esac;
    next(Stamp$CraneOnConveyor) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$CraneOnConveyor; 
    esac;
    next(Stamp$CranePositionStamp) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$CranePositionStamp; 
    esac;
    next(Stamp$CraneSucked) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$CraneSucked; 
    esac;
    next(Stamp$CraneUp) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$CraneUp; 
    esac;
    next(Stamp$Duration) := case
        Stamp$SFCInit | Stamp$SFCReset : 0ud16_125; 
        TRUE : Stamp$Duration; 
    esac;
    next(Stamp$SFCInit) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$SFCInit; 
    esac;
    next(Stamp$SFCPause) := Stamp$SFCPause;
    next(Stamp$SFCReset) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$SFCReset; 
    esac;
    next(Stamp$StampGreenLamp) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampGreenLamp; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampGreenLamp; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$StampGreenLamp; 
        esac; 
    esac;
    next(Stamp$StampLowered) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StampLowered; 
    esac;
    next(Stamp$StampPressure) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampPressure; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampPressure; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$StampPressure; 
        esac; 
    esac;
    next(Stamp$StampPusher) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampPusher; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampPusher; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampPusher; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampPusher; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampPusher; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$StampPusher; 
        esac; 
    esac;
    next(Stamp$StampSliderFilled) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StampSliderFilled; 
    esac;
    next(Stamp$StampSliderMovedIn) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedIn; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedIn; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedIn; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedIn; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$StampSliderMovedIn; 
        esac; 
    esac;
    next(Stamp$StampSliderMovedOut) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedOut; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedOut; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedOut; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedOut; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampSliderMovedOut; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$StampSliderMovedOut; 
        esac; 
    esac;
    next(Stamp$StampSliderSensorMovedIn) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StampSliderSensorMovedIn; 
    esac;
    next(Stamp$StampSliderSensorMovedOut) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StampSliderSensorMovedOut; 
    esac;
    next(Stamp$StampStartButton) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StampStartButton; 
    esac;
    next(Stamp$StampUp) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StampUp; 
    esac;
    next(Stamp$StampWhiteLamp) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StampWhiteLamp; 
    esac;
    next(Stamp$StartCommandStamp) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StartCommandStamp; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StartCommandStamp; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP : TRUE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StartCommandStamp; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$StartCommandStamp; 
        esac; 
    esac;
    next(Stamp$StartVar) := case
        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
        TRUE : Stamp$StartVar; 
    esac;
    next(Stamp$Timer$ET) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : case
                Stamp$SFCInit | Stamp$SFCReset : 0ud16_0; 
                TRUE : Stamp$Timer$ET; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : Main$Stamp$Timer$0$Stamp$Timer$ET__random; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : Main$Stamp$Timer$1$Stamp$Timer$ET__random; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : 0ud16_0; 
                TRUE : Stamp$Timer$ET; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : 0ud16_0; 
            TRUE : Stamp$Timer$ET; 
        esac; 
    esac;
    next(Stamp$Timer$IN) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$Timer$IN; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$StampLowered; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$Timer$IN; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$Timer$IN; 
        esac; 
    esac;
    next(Stamp$Timer$PT) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : case
                Stamp$SFCInit | Stamp$SFCReset : 0ud16_0; 
                TRUE : Stamp$Timer$PT; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : 0ud16_0; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : 0ud16_0; 
                TRUE : Stamp$Timer$PT; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : 0ud16_0; 
            TRUE : Stamp$Timer$PT; 
        esac; 
    esac;
    next(Stamp$Timer$Q) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$Timer$Q; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : Main$Stamp$Timer$0$Stamp$Timer$Q__random; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : Main$Stamp$Timer$1$Stamp$Timer$Q__random; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$Timer$Q; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$Timer$Q; 
        esac; 
    esac;
    next(Stamp$__transit) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                TRUE : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : case
                case
                    (case
                        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                        TRUE : Stamp$StampStartButton; 
                    esac) = TRUE : TRUE; 
                    TRUE : case
                        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                        TRUE : Stamp$interconnectStampStartCommand; 
                    esac; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP : case
                TRUE : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderSensorMovedIn; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderSensorMovedOut; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampLowered; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampUp; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StartVar; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderFilled; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$CraneUp; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderSensorMovedIn; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampLowered; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : case
                Main$Stamp$Timer$0$Stamp$Timer$Q__random : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : case
                TRUE : TRUE; 
                TRUE : FALSE; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                (case
                    Stamp$SFCInit | Stamp$SFCReset : 0sd16_0; 
                    TRUE : Stamp$AnalogCranePosition; 
                esac) > 0sd16_16160 & (case
                    Stamp$SFCInit | Stamp$SFCReset : 0sd16_0; 
                    TRUE : Stamp$AnalogCranePosition; 
                esac) < 0sd16_16260 & !case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderFilled; 
                esac : TRUE; 
                TRUE : FALSE; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$__transit; 
        esac; 
    esac;
    next(Stamp$_state) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                TRUE : START_STAMP; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : case
                case
                    (case
                        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                        TRUE : Stamp$StampStartButton; 
                    esac) = TRUE : TRUE; 
                    TRUE : case
                        Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                        TRUE : Stamp$interconnectStampStartCommand; 
                    esac; 
                esac : GREEN_LAMP; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP : case
                TRUE : STAMP_INIT_1; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderSensorMovedIn; 
                esac : STAMP_INIT_2; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderSensorMovedOut; 
                esac : STAMP_INIT_3; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampLowered; 
                esac : STAMP_INIT_4; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampUp; 
                esac : INTERSTEP; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StartVar; 
                esac : INTERTSEP_2; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderFilled; 
                esac : STEP0; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$CraneUp; 
                esac : STAMPSLIDERBACK; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderSensorMovedIn; 
                esac : STAMPPROCESS; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : case
                case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampLowered; 
                esac : STEP1; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : case
                Main$Stamp$Timer$0$Stamp$Timer$Q__random : STAMPSLIDERFORWARD; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : case
                TRUE : STEP2; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                (case
                    Stamp$SFCInit | Stamp$SFCReset : 0sd16_0; 
                    TRUE : Stamp$AnalogCranePosition; 
                esac) > 0sd16_16160 & (case
                    Stamp$SFCInit | Stamp$SFCReset : 0sd16_0; 
                    TRUE : Stamp$AnalogCranePosition; 
                esac) < 0sd16_16260 & !case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampSliderFilled; 
                esac : INTERSTEP; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                    TRUE : Stamp$_state; 
                esac; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
            TRUE : Stamp$_state; 
        esac; 
    esac;
    next(Stamp$interconnect) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$interconnect; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 : Main$Stamp$Timer$0$Stamp$Timer$Q__random; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD : case
                (case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampLowered; 
                esac) = FALSE & (case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampUp; 
                esac) = TRUE : FALSE; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$interconnect; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$interconnect; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$interconnect; 
        esac; 
    esac;
    next(Stamp$interconnectStampStartCommand) := case
        !((case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$SFCInit; 
        esac) | Stamp$SFCPause) : case
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = "INIT" : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$interconnectStampStartCommand; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = START_STAMP : case
                (case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$StampStartButton; 
                esac) = TRUE : TRUE; 
                TRUE : case
                    Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                    TRUE : Stamp$interconnectStampStartCommand; 
                esac; 
            esac; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = GREEN_LAMP : FALSE; 
            (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_3 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMP_INIT_4 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERSTEP | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = INTERTSEP_2 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP0 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERBACK | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPPROCESS | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP1 | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STAMPSLIDERFORWARD | (case
                Stamp$SFCInit | Stamp$SFCReset : "INIT"; 
                TRUE : Stamp$_state; 
            esac) = STEP2 : case
                Stamp$SFCInit | Stamp$SFCReset : FALSE; 
                TRUE : Stamp$interconnectStampStartCommand; 
            esac; 
        esac; 
        TRUE : case
            Stamp$SFCInit | Stamp$SFCReset : FALSE; 
            TRUE : Stamp$interconnectStampStartCommand; 
        esac; 
    esac;
-- end of module Main$Stamp_abstractednew
